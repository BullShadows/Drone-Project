
PiPlsWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006784  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006954  08006954  00007954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aec  08006aec  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af4  08006af4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af4  08006af4  00007af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006af8  08006af8  00007af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006afc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000060  08006b5c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006b5c  00008358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012241  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002836  00000000  00000000  0001a2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  0001db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023313  00000000  00000000  0001e852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015446  00000000  00000000  00041b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d463e  00000000  00000000  00056fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b5e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d4c  00000000  00000000  0012b62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00130378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800693c 	.word	0x0800693c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800693c 	.word	0x0800693c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <CommandParser_Init>:
int pitch = 0;
int roll = 0;
int yaw = 0;

void CommandParser_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <CommandParser_Init+0x2c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000e32:	2220      	movs	r2, #32
 8000e34:	2100      	movs	r1, #0
 8000e36:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <CommandParser_Init+0x30>)
 8000e38:	f004 ff4e 	bl	8005cd8 <memset>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_buffer[rx_index], 1);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <CommandParser_Init+0x2c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <CommandParser_Init+0x30>)
 8000e44:	4413      	add	r3, r2
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <CommandParser_Init+0x34>)
 8000e4c:	f003 fef5 	bl	8004c3a <HAL_UART_Receive_IT>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000009c 	.word	0x2000009c
 8000e58:	2000007c 	.word	0x2000007c
 8000e5c:	20000178 	.word	0x20000178

08000e60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000edc <HAL_UART_RxCpltCallback+0x7c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d130      	bne.n	8000ed4 <HAL_UART_RxCpltCallback+0x74>
    {
        if (rx_buffer[rx_index] == '\n')
 8000e72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x84>)
 8000e7a:	5c9b      	ldrb	r3, [r3, r2]
 8000e7c:	2b0a      	cmp	r3, #10
 8000e7e:	d10c      	bne.n	8000e9a <HAL_UART_RxCpltCallback+0x3a>
        {
            rx_buffer[rx_index] = '\0';
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x84>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	5499      	strb	r1, [r3, r2]
            command_received = 1;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <HAL_UART_RxCpltCallback+0x88>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e012      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x60>
        }
        else
        {
            if (rx_index < RX_BUFFER_SIZE - 1)
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b1e      	cmp	r3, #30
 8000ea0:	d806      	bhi.n	8000eb0 <HAL_UART_RxCpltCallback+0x50>
            {
                rx_index++;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e007      	b.n	8000ec0 <HAL_UART_RxCpltCallback+0x60>
            }
            else
            {
                rx_index = 0;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
                memset(rx_buffer, 0, sizeof(rx_buffer));
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x84>)
 8000ebc:	f004 ff0c 	bl	8005cd8 <memset>
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_buffer[rx_index], 1);
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x80>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x84>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	@ (8000eec <HAL_UART_RxCpltCallback+0x8c>)
 8000ed0:	f003 feb3 	bl	8004c3a <HAL_UART_Receive_IT>
    }
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	2000009c 	.word	0x2000009c
 8000ee4:	2000007c 	.word	0x2000007c
 8000ee8:	2000009d 	.word	0x2000009d
 8000eec:	20000178 	.word	0x20000178

08000ef0 <CommandParser_Update>:

void CommandParser_Update(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	@ 0x58
 8000ef4:	af02      	add	r7, sp, #8
    if (command_received)
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <CommandParser_Update+0xdc>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d061      	beq.n	8000fc4 <CommandParser_Update+0xd4>
    {
        command_received = 0;
 8000f00:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <CommandParser_Update+0xdc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

        char command = rx_buffer[0];
 8000f06:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <CommandParser_Update+0xe0>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        char num_str[8] = {0};
 8000f0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
        strncpy(num_str, &rx_buffer[1], sizeof(num_str) - 1);
 8000f18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	492d      	ldr	r1, [pc, #180]	@ (8000fd4 <CommandParser_Update+0xe4>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fee1 	bl	8005ce8 <strncpy>
        int value = atoi(num_str);
 8000f26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fe16 	bl	8005b5c <atoi>
 8000f30:	64b8      	str	r0, [r7, #72]	@ 0x48

        // Debug print
        char debug[64];
        snprintf(debug, sizeof(debug), "Parsed: %c = %d\r\n", command, value);
 8000f32:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000f36:	4638      	mov	r0, r7
 8000f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	4a26      	ldr	r2, [pc, #152]	@ (8000fd8 <CommandParser_Update+0xe8>)
 8000f40:	2140      	movs	r1, #64	@ 0x40
 8000f42:	f004 fe93 	bl	8005c6c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debug, strlen(debug), 100);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f961 	bl	8000210 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	4639      	mov	r1, r7
 8000f54:	2364      	movs	r3, #100	@ 0x64
 8000f56:	4821      	ldr	r0, [pc, #132]	@ (8000fdc <CommandParser_Update+0xec>)
 8000f58:	f003 fde4 	bl	8004b24 <HAL_UART_Transmit>

        if (command == 'T') {
 8000f5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000f60:	2b54      	cmp	r3, #84	@ 0x54
 8000f62:	d103      	bne.n	8000f6c <CommandParser_Update+0x7c>
            throttle = value;
 8000f64:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe0 <CommandParser_Update+0xf0>)
 8000f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e026      	b.n	8000fba <CommandParser_Update+0xca>
        }
        else if (command == 'P') {
 8000f6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000f70:	2b50      	cmp	r3, #80	@ 0x50
 8000f72:	d10b      	bne.n	8000f8c <CommandParser_Update+0x9c>
            pitch = value;
 8000f74:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <CommandParser_Update+0xf4>)
 8000f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f78:	6013      	str	r3, [r2, #0]
            desired_pitch = (float)value; // Can be negative
 8000f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <CommandParser_Update+0xf8>)
 8000f86:	edc3 7a00 	vstr	s15, [r3]
 8000f8a:	e016      	b.n	8000fba <CommandParser_Update+0xca>

        }
        else if (command == 'R') {
 8000f8c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000f90:	2b52      	cmp	r3, #82	@ 0x52
 8000f92:	d10b      	bne.n	8000fac <CommandParser_Update+0xbc>
            roll = value;
 8000f94:	4a15      	ldr	r2, [pc, #84]	@ (8000fec <CommandParser_Update+0xfc>)
 8000f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f98:	6013      	str	r3, [r2, #0]
            desired_roll = (float)value;
 8000f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <CommandParser_Update+0x100>)
 8000fa6:	edc3 7a00 	vstr	s15, [r3]
 8000faa:	e006      	b.n	8000fba <CommandParser_Update+0xca>

        }
        else if (command == 'Y') {
 8000fac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000fb0:	2b59      	cmp	r3, #89	@ 0x59
 8000fb2:	d102      	bne.n	8000fba <CommandParser_Update+0xca>
            yaw = value;
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <CommandParser_Update+0x104>)
 8000fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fb8:	6013      	str	r3, [r2, #0]
        }

        memset(rx_buffer, 0, sizeof(rx_buffer));
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <CommandParser_Update+0xe0>)
 8000fc0:	f004 fe8a 	bl	8005cd8 <memset>
    }
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	@ 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000009d 	.word	0x2000009d
 8000fd0:	2000007c 	.word	0x2000007c
 8000fd4:	2000007d 	.word	0x2000007d
 8000fd8:	08006954 	.word	0x08006954
 8000fdc:	200001c0 	.word	0x200001c0
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	200000a8 	.word	0x200000a8
 8000fe8:	200000a0 	.word	0x200000a0
 8000fec:	200000ac 	.word	0x200000ac
 8000ff0:	200000a4 	.word	0x200000a4
 8000ff4:	200000b0 	.word	0x200000b0

08000ff8 <FlightControl_Init>:
PID_Controller pid_pitch;
PID_Controller pid_roll;


void FlightControl_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    // You could set defaults here if needed
    throttle = 1000;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <FlightControl_Init+0x48>)
 8000ffe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001002:	601a      	str	r2, [r3, #0]
    pitch = 0;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <FlightControl_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
    roll = 0;
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <FlightControl_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
    yaw = 0;
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <FlightControl_Init+0x54>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
    PID_Init(&pid_pitch, 1.5f, 0.0f, 0.3f);
 8001016:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8001050 <FlightControl_Init+0x58>
 800101a:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001054 <FlightControl_Init+0x5c>
 800101e:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8001022:	480d      	ldr	r0, [pc, #52]	@ (8001058 <FlightControl_Init+0x60>)
 8001024:	f000 fbd6 	bl	80017d4 <PID_Init>
    PID_Init(&pid_roll,  1.5f, 0.0f, 0.3f);
 8001028:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001050 <FlightControl_Init+0x58>
 800102c:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001054 <FlightControl_Init+0x5c>
 8001030:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8001034:	4809      	ldr	r0, [pc, #36]	@ (800105c <FlightControl_Init+0x64>)
 8001036:	f000 fbcd 	bl	80017d4 <PID_Init>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000
 8001044:	200000a8 	.word	0x200000a8
 8001048:	200000ac 	.word	0x200000ac
 800104c:	200000b0 	.word	0x200000b0
 8001050:	3e99999a 	.word	0x3e99999a
 8001054:	00000000 	.word	0x00000000
 8001058:	200000b4 	.word	0x200000b4
 800105c:	200000c8 	.word	0x200000c8

08001060 <FlightControl_UpdateMotors>:

void FlightControl_UpdateMotors(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	ed2d 8b02 	vpush	{d8}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
    int16_t ax, ay, az;

    // Read acceleration values from IMU
    if (MPU9250_ReadAccel(&hi2c1, &ax, &ay, &az) != HAL_OK) {
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	1d3a      	adds	r2, r7, #4
 800106e:	1db9      	adds	r1, r7, #6
 8001070:	489b      	ldr	r0, [pc, #620]	@ (80012e0 <FlightControl_UpdateMotors+0x280>)
 8001072:	f000 fb72 	bl	800175a <MPU9250_ReadAccel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <FlightControl_UpdateMotors+0x2a>
    	ax = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	80fb      	strh	r3, [r7, #6]
    	    ay = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	80bb      	strh	r3, [r7, #4]
    	    az = 16384; // ~1g if you're using 2g range
 8001084:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001088:	807b      	strh	r3, [r7, #2]
    }

    // Convert to tilt angles (degrees)
    float pitch = atan2f(ax, sqrtf(ay * ay + az * az)) * 180.0f / M_PI;
 800108a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001096:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800109a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800109e:	fb03 f202 	mul.w	r2, r3, r2
 80010a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010a6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80010aa:	fb01 f303 	mul.w	r3, r1, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	f005 faa0 	bl	8006600 <sqrtf>
 80010c0:	eef0 7a40 	vmov.f32	s15, s0
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	eeb0 0a48 	vmov.f32	s0, s16
 80010cc:	f005 fa96 	bl	80065fc <atan2f>
 80010d0:	eef0 7a40 	vmov.f32	s15, s0
 80010d4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80012e4 <FlightControl_UpdateMotors+0x284>
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	ee17 0a90 	vmov	r0, s15
 80010e0:	f7ff fa52 	bl	8000588 <__aeabi_f2d>
 80010e4:	a37c      	add	r3, pc, #496	@ (adr r3, 80012d8 <FlightControl_UpdateMotors+0x278>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fbcf 	bl	800088c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fcb1 	bl	8000a5c <__aeabi_d2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    float roll  = atan2f(ay, sqrtf(ax * ax + az * az)) * 180.0f / M_PI;
 80010fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001112:	fb03 f202 	mul.w	r2, r3, r2
 8001116:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800111a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4413      	add	r3, r2
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112c:	eeb0 0a67 	vmov.f32	s0, s15
 8001130:	f005 fa66 	bl	8006600 <sqrtf>
 8001134:	eef0 7a40 	vmov.f32	s15, s0
 8001138:	eef0 0a67 	vmov.f32	s1, s15
 800113c:	eeb0 0a48 	vmov.f32	s0, s16
 8001140:	f005 fa5c 	bl	80065fc <atan2f>
 8001144:	eef0 7a40 	vmov.f32	s15, s0
 8001148:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80012e4 <FlightControl_UpdateMotors+0x284>
 800114c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001150:	ee17 0a90 	vmov	r0, s15
 8001154:	f7ff fa18 	bl	8000588 <__aeabi_f2d>
 8001158:	a35f      	add	r3, pc, #380	@ (adr r3, 80012d8 <FlightControl_UpdateMotors+0x278>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fb95 	bl	800088c <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fc77 	bl	8000a5c <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	623b      	str	r3, [r7, #32]

    // Compute PID corrections
    float pitch_out = PID_Compute(&pid_pitch, desired_pitch, pitch);
 8001172:	4b5d      	ldr	r3, [pc, #372]	@ (80012e8 <FlightControl_UpdateMotors+0x288>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	485a      	ldr	r0, [pc, #360]	@ (80012ec <FlightControl_UpdateMotors+0x28c>)
 8001182:	f000 fb48 	bl	8001816 <PID_Compute>
 8001186:	ed87 0a07 	vstr	s0, [r7, #28]
    float roll_out  = PID_Compute(&pid_roll, desired_roll, roll);
 800118a:	4b59      	ldr	r3, [pc, #356]	@ (80012f0 <FlightControl_UpdateMotors+0x290>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	edd7 0a08 	vldr	s1, [r7, #32]
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	4856      	ldr	r0, [pc, #344]	@ (80012f4 <FlightControl_UpdateMotors+0x294>)
 800119a:	f000 fb3c 	bl	8001816 <PID_Compute>
 800119e:	ed87 0a06 	vstr	s0, [r7, #24]

    // Calculate motor values using mixing
    int m1 = throttle - pitch_out - roll_out; // Front Left
 80011a2:	4b55      	ldr	r3, [pc, #340]	@ (80012f8 <FlightControl_UpdateMotors+0x298>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 3a90 	vmov	r3, s15
 80011c6:	617b      	str	r3, [r7, #20]
    int m2 = throttle - pitch_out + roll_out; // Front Right
 80011c8:	4b4b      	ldr	r3, [pc, #300]	@ (80012f8 <FlightControl_UpdateMotors+0x298>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 3a90 	vmov	r3, s15
 80011ec:	613b      	str	r3, [r7, #16]
    int m3 = throttle + pitch_out + roll_out; // Rear Right
 80011ee:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <FlightControl_UpdateMotors+0x298>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80011fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001202:	edd7 7a06 	vldr	s15, [r7, #24]
 8001206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120e:	ee17 3a90 	vmov	r3, s15
 8001212:	60fb      	str	r3, [r7, #12]
    int m4 = throttle + pitch_out - roll_out; // Rear Left
 8001214:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <FlightControl_UpdateMotors+0x298>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001220:	edd7 7a07 	vldr	s15, [r7, #28]
 8001224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001228:	edd7 7a06 	vldr	s15, [r7, #24]
 800122c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	60bb      	str	r3, [r7, #8]

    // Clamp motor values to valid PWM range
    m1 = CLAMP(m1, 1000, 2000);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001240:	db06      	blt.n	8001250 <FlightControl_UpdateMotors+0x1f0>
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001248:	bfa8      	it	ge
 800124a:	f44f 63fa 	movge.w	r3, #2000	@ 0x7d0
 800124e:	e001      	b.n	8001254 <FlightControl_UpdateMotors+0x1f4>
 8001250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001254:	617b      	str	r3, [r7, #20]
    m2 = CLAMP(m2, 1000, 2000);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800125c:	db06      	blt.n	800126c <FlightControl_UpdateMotors+0x20c>
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001264:	bfa8      	it	ge
 8001266:	f44f 63fa 	movge.w	r3, #2000	@ 0x7d0
 800126a:	e001      	b.n	8001270 <FlightControl_UpdateMotors+0x210>
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	613b      	str	r3, [r7, #16]
    m3 = CLAMP(m3, 1000, 2000);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001278:	db06      	blt.n	8001288 <FlightControl_UpdateMotors+0x228>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001280:	bfa8      	it	ge
 8001282:	f44f 63fa 	movge.w	r3, #2000	@ 0x7d0
 8001286:	e001      	b.n	800128c <FlightControl_UpdateMotors+0x22c>
 8001288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128c:	60fb      	str	r3, [r7, #12]
    m4 = CLAMP(m4, 1000, 2000);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001294:	db06      	blt.n	80012a4 <FlightControl_UpdateMotors+0x244>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800129c:	bfa8      	it	ge
 800129e:	f44f 63fa 	movge.w	r3, #2000	@ 0x7d0
 80012a2:	e001      	b.n	80012a8 <FlightControl_UpdateMotors+0x248>
 80012a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a8:	60bb      	str	r3, [r7, #8]

    // Send PWM to motors
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, m1); // M1
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <FlightControl_UpdateMotors+0x29c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, m2); // M2
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <FlightControl_UpdateMotors+0x29c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, m3); // M3
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <FlightControl_UpdateMotors+0x29c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, m4); // M4
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <FlightControl_UpdateMotors+0x29c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	@ 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	ecbd 8b02 	vpop	{d8}
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	54442d18 	.word	0x54442d18
 80012dc:	400921fb 	.word	0x400921fb
 80012e0:	200000dc 	.word	0x200000dc
 80012e4:	43340000 	.word	0x43340000
 80012e8:	200000a0 	.word	0x200000a0
 80012ec:	200000b4 	.word	0x200000b4
 80012f0:	200000a4 	.word	0x200000a4
 80012f4:	200000c8 	.word	0x200000c8
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000130 	.word	0x20000130

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001304:	f000 fcf8 	bl	8001cf8 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU9250_Init(&hi2c1);
 8001308:	4815      	ldr	r0, [pc, #84]	@ (8001360 <main+0x60>)
 800130a:	f000 fa0d 	bl	8001728 <MPU9250_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f82b 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001312:	f000 f995 	bl	8001640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001316:	f000 f969 	bl	80015ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800131a:	f000 f93d 	bl	8001598 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800131e:	f000 f891 	bl	8001444 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001322:	f000 f8bd 	bl	80014a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CommandParser_Init();
 8001326:	f7ff fd7f 	bl	8000e28 <CommandParser_Init>
  FlightControl_Init();
 800132a:	f7ff fe65 	bl	8000ff8 <FlightControl_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <main+0x64>)
 8001332:	f002 ff25 	bl	8004180 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001336:	2104      	movs	r1, #4
 8001338:	480a      	ldr	r0, [pc, #40]	@ (8001364 <main+0x64>)
 800133a:	f002 ff21 	bl	8004180 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800133e:	2108      	movs	r1, #8
 8001340:	4808      	ldr	r0, [pc, #32]	@ (8001364 <main+0x64>)
 8001342:	f002 ff1d 	bl	8004180 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001346:	210c      	movs	r1, #12
 8001348:	4806      	ldr	r0, [pc, #24]	@ (8001364 <main+0x64>)
 800134a:	f002 ff19 	bl	8004180 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  CommandParser_Update();     // Handles receiving + parsing
 800134e:	f7ff fdcf 	bl	8000ef0 <CommandParser_Update>
	      FlightControl_UpdateMotors(); // Handles motor mixing
 8001352:	f7ff fe85 	bl	8001060 <FlightControl_UpdateMotors>
	      HAL_Delay(20);
 8001356:	2014      	movs	r0, #20
 8001358:	f000 fd40 	bl	8001ddc <HAL_Delay>
	  	  CommandParser_Update();     // Handles receiving + parsing
 800135c:	bf00      	nop
 800135e:	e7f6      	b.n	800134e <main+0x4e>
 8001360:	200000dc 	.word	0x200000dc
 8001364:	20000130 	.word	0x20000130

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	@ 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2234      	movs	r2, #52	@ 0x34
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f004 fcae 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <SystemClock_Config+0xd4>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	4a29      	ldr	r2, [pc, #164]	@ (800143c <SystemClock_Config+0xd4>)
 8001396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	@ 0x40
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <SystemClock_Config+0xd4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <SystemClock_Config+0xd8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013b4:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <SystemClock_Config+0xd8>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <SystemClock_Config+0xd8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d0:	2310      	movs	r3, #16
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d4:	2302      	movs	r3, #2
 80013d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d8:	2300      	movs	r3, #0
 80013da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013dc:	2310      	movs	r3, #16
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013e6:	2304      	movs	r3, #4
 80013e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fbd4 	bl	8003ba4 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001402:	f000 f98b 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2302      	movs	r3, #2
 800140c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f002 f874 	bl	8003510 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800142e:	f000 f975 	bl	800171c <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	@ 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <MX_I2C1_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <MX_I2C1_Init+0x58>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001482:	f001 f821 	bl	80024c8 <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800148c:	f000 f946 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000dc 	.word	0x200000dc
 8001498:	40005400 	.word	0x40005400
 800149c:	000186a0 	.word	0x000186a0

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <MX_TIM2_Init+0xf4>)
 80014c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80014ca:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <MX_TIM2_Init+0xf4>)
 80014cc:	2253      	movs	r2, #83	@ 0x53
 80014ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <MX_TIM2_Init+0xf4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21427;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <MX_TIM2_Init+0xf4>)
 80014d8:	f245 32b3 	movw	r2, #21427	@ 0x53b3
 80014dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <MX_TIM2_Init+0xf4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <MX_TIM2_Init+0xf4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ea:	482a      	ldr	r0, [pc, #168]	@ (8001594 <MX_TIM2_Init+0xf4>)
 80014ec:	f002 fdf8 	bl	80040e0 <HAL_TIM_PWM_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014f6:	f000 f911 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4619      	mov	r1, r3
 8001508:	4822      	ldr	r0, [pc, #136]	@ (8001594 <MX_TIM2_Init+0xf4>)
 800150a:	f003 fa3f 	bl	800498c <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001514:	f000 f902 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001518:	2360      	movs	r3, #96	@ 0x60
 800151a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800151c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001520:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	4619      	mov	r1, r3
 8001530:	4818      	ldr	r0, [pc, #96]	@ (8001594 <MX_TIM2_Init+0xf4>)
 8001532:	f002 feed 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800153c:	f000 f8ee 	bl	800171c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2204      	movs	r2, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4812      	ldr	r0, [pc, #72]	@ (8001594 <MX_TIM2_Init+0xf4>)
 800154c:	f002 fee0 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001556:	f000 f8e1 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2208      	movs	r2, #8
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <MX_TIM2_Init+0xf4>)
 8001562:	f002 fed5 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800156c:	f000 f8d6 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	220c      	movs	r2, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <MX_TIM2_Init+0xf4>)
 8001578:	f002 feca 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001582:	f000 f8cb 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001586:	4803      	ldr	r0, [pc, #12]	@ (8001594 <MX_TIM2_Init+0xf4>)
 8001588:	f000 fa1c 	bl	80019c4 <HAL_TIM_MspPostInit>

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	@ 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000130 	.word	0x20000130

08001598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <MX_USART1_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015d0:	f003 fa58 	bl	8004a84 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f000 f89f 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000178 	.word	0x20000178
 80015e8:	40011000 	.word	0x40011000

080015ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <MX_USART2_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_USART2_UART_Init+0x4c>)
 8001624:	f003 fa2e 	bl	8004a84 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f875 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200001c0 	.word	0x200001c0
 800163c:	40004400 	.word	0x40004400

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <MX_GPIO_Init+0xd0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a2c      	ldr	r2, [pc, #176]	@ (8001710 <MX_GPIO_Init+0xd0>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <MX_GPIO_Init+0xd0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <MX_GPIO_Init+0xd0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a25      	ldr	r2, [pc, #148]	@ (8001710 <MX_GPIO_Init+0xd0>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <MX_GPIO_Init+0xd0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <MX_GPIO_Init+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <MX_GPIO_Init+0xd0>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <MX_GPIO_Init+0xd0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <MX_GPIO_Init+0xd0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a17      	ldr	r2, [pc, #92]	@ (8001710 <MX_GPIO_Init+0xd0>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_GPIO_Init+0xd0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2120      	movs	r1, #32
 80016ca:	4812      	ldr	r0, [pc, #72]	@ (8001714 <MX_GPIO_Init+0xd4>)
 80016cc:	f000 fee2 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	@ (8001718 <MX_GPIO_Init+0xd8>)
 80016e8:	f000 fd40 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016ec:	2320      	movs	r3, #32
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4804      	ldr	r0, [pc, #16]	@ (8001714 <MX_GPIO_Init+0xd4>)
 8001704:	f000 fd32 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020800 	.word	0x40020800

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <MPU9250_Init>:
#include "stdlib.h"
#include <String.h>
#include <math.h> // for atan2f()

HAL_StatusTypeDef MPU9250_Init(I2C_HandleTypeDef *hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af04      	add	r7, sp, #16
 800172e:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Mem_Write(hi2c, MPU9250_I2C_ADDR, 0x6B, 1, &data, 1, 1000);
 8001734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	2301      	movs	r3, #1
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	f107 030f 	add.w	r3, r7, #15
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2301      	movs	r3, #1
 8001746:	226b      	movs	r2, #107	@ 0x6b
 8001748:	21d0      	movs	r1, #208	@ 0xd0
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f001 f800 	bl	8002750 <HAL_I2C_Mem_Write>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <MPU9250_ReadAccel>:
    return HAL_I2C_Mem_Write(hi2c, AK8963_I2C_ADDR, AK8963_CNTL1, 1, &data, 1, 1000);
}


HAL_StatusTypeDef MPU9250_ReadAccel(I2C_HandleTypeDef *hi2c, int16_t *ax, int16_t *ay, int16_t *az)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b08a      	sub	sp, #40	@ 0x28
 800175e:	af04      	add	r7, sp, #16
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	603b      	str	r3, [r7, #0]
    uint8_t data[6];

    if (HAL_I2C_Mem_Read(hi2c, MPU9250_I2C_ADDR, 0x3B, 1, data, 6, 1000) != HAL_OK)
 8001768:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2306      	movs	r3, #6
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	223b      	movs	r2, #59	@ 0x3b
 800177c:	21d0      	movs	r1, #208	@ 0xd0
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 f8e0 	bl	8002944 <HAL_I2C_Mem_Read>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MPU9250_ReadAccel+0x34>
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e01e      	b.n	80017cc <MPU9250_ReadAccel+0x72>

    *ax = (int16_t)(data[0] << 8 | data[1]);
 800178e:	7c3b      	ldrb	r3, [r7, #16]
 8001790:	b21b      	sxth	r3, r3
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21a      	sxth	r2, r3
 8001796:	7c7b      	ldrb	r3, [r7, #17]
 8001798:	b21b      	sxth	r3, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	b21a      	sxth	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)(data[2] << 8 | data[3]);
 80017a2:	7cbb      	ldrb	r3, [r7, #18]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	7cfb      	ldrb	r3, [r7, #19]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)(data[4] << 8 | data[5]);
 80017b6:	7d3b      	ldrb	r3, [r7, #20]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7d7b      	ldrb	r3, [r7, #21]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <PID_Init>:
#include "pid_controller.h"

void PID_Init(PID_Controller* pid, float kp, float ki, float kd) {
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80017e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80017e4:	ed87 1a00 	vstr	s2, [r7]
    pid->Kp = kp;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	601a      	str	r2, [r3, #0]
    pid->Ki = ki;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	605a      	str	r2, [r3, #4]
    pid->Kd = kd;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	609a      	str	r2, [r3, #8]
    pid->integral = 0;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    pid->last_error = 0;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <PID_Compute>:

float PID_Compute(PID_Controller* pid, float setpoint, float measurement) {
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001822:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 8001826:	ed97 7a02 	vldr	s14, [r7, #8]
 800182a:	edd7 7a01 	vldr	s15, [r7, #4]
 800182e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001832:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += error;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	ed93 7a03 	vldr	s14, [r3, #12]
 800183c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	edc3 7a03 	vstr	s15, [r3, #12]
    float derivative = error - pid->last_error;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001850:	ed97 7a05 	vldr	s14, [r7, #20]
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	edc7 7a04 	vstr	s15, [r7, #16]
    pid->last_error = error;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	611a      	str	r2, [r3, #16]

    return pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	ed93 7a00 	vldr	s14, [r3]
 8001868:	edd7 7a05 	vldr	s15, [r7, #20]
 800186c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	edd3 6a01 	vldr	s13, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	edd3 7a03 	vldr	s15, [r3, #12]
 800187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	edd3 6a02 	vldr	s13, [r3, #8]
 800188a:	edd7 7a04 	vldr	s15, [r7, #16]
 800188e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001896:	eeb0 0a67 	vmov.f32	s0, s15
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018e2:	2007      	movs	r0, #7
 80018e4:	f000 fb6e 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	@ (8001978 <HAL_I2C_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12c      	bne.n	8001970 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a17      	ldr	r2, [pc, #92]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001932:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001944:	2304      	movs	r3, #4
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	480c      	ldr	r0, [pc, #48]	@ (8001980 <HAL_I2C_MspInit+0x8c>)
 8001950:	f000 fc0c 	bl	800216c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_I2C_MspInit+0x88>)
 800195e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001962:	6413      	str	r3, [r2, #64]	@ 0x40
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_I2C_MspInit+0x88>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	@ 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400

08001984 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001994:	d10d      	bne.n	80019b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e4:	d13c      	bne.n	8001a60 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <HAL_TIM_MspPostInit+0xa4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <HAL_TIM_MspPostInit+0xa4>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <HAL_TIM_MspPostInit+0xa4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <HAL_TIM_MspPostInit+0xa4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <HAL_TIM_MspPostInit+0xa4>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_TIM_MspPostInit+0xa4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <HAL_TIM_MspPostInit+0xa8>)
 8001a3a:	f000 fb97 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001a3e:	f240 4304 	movw	r3, #1028	@ 0x404
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a50:	2301      	movs	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_TIM_MspPostInit+0xac>)
 8001a5c:	f000 fb86 	bl	800216c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	@ 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	@ 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3a      	ldr	r2, [pc, #232]	@ (8001b7c <HAL_UART_MspInit+0x108>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d135      	bne.n	8001b02 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa6:	4b36      	ldr	r3, [pc, #216]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a31      	ldr	r2, [pc, #196]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ace:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4826      	ldr	r0, [pc, #152]	@ (8001b84 <HAL_UART_MspInit+0x110>)
 8001aec:	f000 fb3e 	bl	800216c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2025      	movs	r0, #37	@ 0x25
 8001af6:	f000 fa70 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001afa:	2025      	movs	r0, #37	@ 0x25
 8001afc:	f000 fa89 	bl	8002012 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b00:	e038      	b.n	8001b74 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a20      	ldr	r2, [pc, #128]	@ (8001b88 <HAL_UART_MspInit+0x114>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d133      	bne.n	8001b74 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	4a1a      	ldr	r2, [pc, #104]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <HAL_UART_MspInit+0x10c>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b44:	230c      	movs	r3, #12
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b54:	2307      	movs	r3, #7
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4809      	ldr	r0, [pc, #36]	@ (8001b84 <HAL_UART_MspInit+0x110>)
 8001b60:	f000 fb04 	bl	800216c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2026      	movs	r0, #38	@ 0x26
 8001b6a:	f000 fa36 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b6e:	2026      	movs	r0, #38	@ 0x26
 8001b70:	f000 fa4f 	bl	8002012 <HAL_NVIC_EnableIRQ>
}
 8001b74:	bf00      	nop
 8001b76:	3730      	adds	r7, #48	@ 0x30
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40004400 	.word	0x40004400

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 f8db 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <USART1_IRQHandler+0x10>)
 8001bf2:	f003 f847 	bl	8004c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000178 	.word	0x20000178

08001c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <USART2_IRQHandler+0x10>)
 8001c06:	f003 f83d 	bl	8004c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200001c0 	.word	0x200001c0

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f004 f864 	bl	8005d10 <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20020000 	.word	0x20020000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	20000208 	.word	0x20000208
 8001c7c:	20000358 	.word	0x20000358

08001c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <SystemInit+0x20>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <SystemInit+0x20>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ca8:	f7ff ffea 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f004 f823 	bl	8005d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7ff fb13 	bl	8001300 <main>
  bx  lr    
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ce8:	08006afc 	.word	0x08006afc
  ldr r2, =_sbss
 8001cec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001cf0:	20000358 	.word	0x20000358

08001cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <HAL_Init+0x40>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <HAL_Init+0x40>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	@ (8001d38 <HAL_Init+0x40>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f94f 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fdba 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f967 	bl	800202e <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 f92f 	bl	8001fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	@ (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000004 	.word	0x20000004
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	2000000c 	.word	0x2000000c
 8001dc0:	2000020c 	.word	0x2000020c

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2000020c 	.word	0x2000020c

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff ffee 	bl	8001dc4 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_Delay+0x44>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000000c 	.word	0x2000000c

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4907      	ldr	r1, [pc, #28]	@ (8001ec0 <__NVIC_EnableIRQ+0x38>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff29 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff3e 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff31 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa2 	bl	8001f80 <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff feb6 	bl	8001dc4 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d008      	beq.n	8002078 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2280      	movs	r2, #128	@ 0x80
 800206a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e052      	b.n	800211e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0216 	bic.w	r2, r2, #22
 8002086:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002096:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <HAL_DMA_Abort+0x62>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c8:	e013      	b.n	80020f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ca:	f7ff fe7b 	bl	8001dc4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d90c      	bls.n	80020f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2203      	movs	r2, #3
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e015      	b.n	800211e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e4      	bne.n	80020ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002104:	223f      	movs	r2, #63	@ 0x3f
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d004      	beq.n	8002144 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e00c      	b.n	800215e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2205      	movs	r2, #5
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	@ 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e165      	b.n	8002454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8154 	bne.w	800244e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80ae 	beq.w	800244e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b5d      	ldr	r3, [pc, #372]	@ (800246c <HAL_GPIO_Init+0x300>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	4a5c      	ldr	r2, [pc, #368]	@ (800246c <HAL_GPIO_Init+0x300>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002300:	6453      	str	r3, [r2, #68]	@ 0x44
 8002302:	4b5a      	ldr	r3, [pc, #360]	@ (800246c <HAL_GPIO_Init+0x300>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_GPIO_Init+0x304>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4f      	ldr	r2, [pc, #316]	@ (8002474 <HAL_GPIO_Init+0x308>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x21a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4e      	ldr	r2, [pc, #312]	@ (8002478 <HAL_GPIO_Init+0x30c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x216>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4d      	ldr	r2, [pc, #308]	@ (800247c <HAL_GPIO_Init+0x310>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x212>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4c      	ldr	r2, [pc, #304]	@ (8002480 <HAL_GPIO_Init+0x314>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x20e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4b      	ldr	r2, [pc, #300]	@ (8002484 <HAL_GPIO_Init+0x318>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x20a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4a      	ldr	r2, [pc, #296]	@ (8002488 <HAL_GPIO_Init+0x31c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x206>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_GPIO_Init+0x320>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x202>
 800236a:	2306      	movs	r3, #6
 800236c:	e00c      	b.n	8002388 <HAL_GPIO_Init+0x21c>
 800236e:	2307      	movs	r3, #7
 8002370:	e00a      	b.n	8002388 <HAL_GPIO_Init+0x21c>
 8002372:	2305      	movs	r3, #5
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x21c>
 8002376:	2304      	movs	r3, #4
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x21c>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x21c>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x21c>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x21c>
 8002386:	2300      	movs	r3, #0
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f002 0203 	and.w	r2, r2, #3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002398:	4935      	ldr	r1, [pc, #212]	@ (8002470 <HAL_GPIO_Init+0x304>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002490 <HAL_GPIO_Init+0x324>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ca:	4a31      	ldr	r2, [pc, #196]	@ (8002490 <HAL_GPIO_Init+0x324>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002490 <HAL_GPIO_Init+0x324>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f4:	4a26      	ldr	r2, [pc, #152]	@ (8002490 <HAL_GPIO_Init+0x324>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fa:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <HAL_GPIO_Init+0x324>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241e:	4a1c      	ldr	r2, [pc, #112]	@ (8002490 <HAL_GPIO_Init+0x324>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002424:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_GPIO_Init+0x324>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002448:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <HAL_GPIO_Init+0x324>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	f67f ae96 	bls.w	8002188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40021400 	.word	0x40021400
 800248c:	40021800 	.word	0x40021800
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e12b      	b.n	8002732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fa00 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2224      	movs	r2, #36	@ 0x24
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800251a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800252a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800252c:	f001 f8e2 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8002530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a81      	ldr	r2, [pc, #516]	@ (800273c <HAL_I2C_Init+0x274>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d807      	bhi.n	800254c <HAL_I2C_Init+0x84>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a80      	ldr	r2, [pc, #512]	@ (8002740 <HAL_I2C_Init+0x278>)
 8002540:	4293      	cmp	r3, r2
 8002542:	bf94      	ite	ls
 8002544:	2301      	movls	r3, #1
 8002546:	2300      	movhi	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e006      	b.n	800255a <HAL_I2C_Init+0x92>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a7d      	ldr	r2, [pc, #500]	@ (8002744 <HAL_I2C_Init+0x27c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0e7      	b.n	8002732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a78      	ldr	r2, [pc, #480]	@ (8002748 <HAL_I2C_Init+0x280>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0c9b      	lsrs	r3, r3, #18
 800256c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a6a      	ldr	r2, [pc, #424]	@ (800273c <HAL_I2C_Init+0x274>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d802      	bhi.n	800259c <HAL_I2C_Init+0xd4>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3301      	adds	r3, #1
 800259a:	e009      	b.n	80025b0 <HAL_I2C_Init+0xe8>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	4a69      	ldr	r2, [pc, #420]	@ (800274c <HAL_I2C_Init+0x284>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	3301      	adds	r3, #1
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	495c      	ldr	r1, [pc, #368]	@ (800273c <HAL_I2C_Init+0x274>)
 80025cc:	428b      	cmp	r3, r1
 80025ce:	d819      	bhi.n	8002604 <HAL_I2C_Init+0x13c>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e59      	subs	r1, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fbb1 f3f3 	udiv	r3, r1, r3
 80025de:	1c59      	adds	r1, r3, #1
 80025e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025e4:	400b      	ands	r3, r1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_I2C_Init+0x138>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e59      	subs	r1, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fe:	e051      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 8002600:	2304      	movs	r3, #4
 8002602:	e04f      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <HAL_I2C_Init+0x168>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e012      	b.n	8002656 <HAL_I2C_Init+0x18e>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	0099      	lsls	r1, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Init+0x196>
 800265a:	2301      	movs	r3, #1
 800265c:	e022      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10e      	bne.n	8002684 <HAL_I2C_Init+0x1bc>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1e58      	subs	r0, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	440b      	add	r3, r1
 8002674:	fbb0 f3f3 	udiv	r3, r0, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002682:	e00f      	b.n	80026a4 <HAL_I2C_Init+0x1dc>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	0099      	lsls	r1, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	6809      	ldr	r1, [r1, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6911      	ldr	r1, [r2, #16]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	000186a0 	.word	0x000186a0
 8002740:	001e847f 	.word	0x001e847f
 8002744:	003d08ff 	.word	0x003d08ff
 8002748:	431bde83 	.word	0x431bde83
 800274c:	10624dd3 	.word	0x10624dd3

08002750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	4608      	mov	r0, r1
 800275a:	4611      	mov	r1, r2
 800275c:	461a      	mov	r2, r3
 800275e:	4603      	mov	r3, r0
 8002760:	817b      	strh	r3, [r7, #10]
 8002762:	460b      	mov	r3, r1
 8002764:	813b      	strh	r3, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800276a:	f7ff fb2b 	bl	8001dc4 <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	f040 80d9 	bne.w	8002930 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2319      	movs	r3, #25
 8002784:	2201      	movs	r2, #1
 8002786:	496d      	ldr	r1, [pc, #436]	@ (800293c <HAL_I2C_Mem_Write+0x1ec>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fc8b 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002794:	2302      	movs	r3, #2
 8002796:	e0cc      	b.n	8002932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_I2C_Mem_Write+0x56>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0c5      	b.n	8002932 <HAL_I2C_Mem_Write+0x1e2>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d007      	beq.n	80027cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2221      	movs	r2, #33	@ 0x21
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2240      	movs	r2, #64	@ 0x40
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a3a      	ldr	r2, [r7, #32]
 80027f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a4d      	ldr	r2, [pc, #308]	@ (8002940 <HAL_I2C_Mem_Write+0x1f0>)
 800280c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800280e:	88f8      	ldrh	r0, [r7, #6]
 8002810:	893a      	ldrh	r2, [r7, #8]
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4603      	mov	r3, r0
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fac2 	bl	8002da8 <I2C_RequestMemoryWrite>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d052      	beq.n	80028d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e081      	b.n	8002932 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fd50 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00d      	beq.n	800285a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	2b04      	cmp	r3, #4
 8002844:	d107      	bne.n	8002856 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06b      	b.n	8002932 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b04      	cmp	r3, #4
 8002896:	d11b      	bne.n	80028d0 <HAL_I2C_Mem_Write+0x180>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1aa      	bne.n	800282e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fd43 	bl	8003368 <I2C_WaitOnBTFFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00d      	beq.n	8002904 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d107      	bne.n	8002900 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e016      	b.n	8002932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	00100002 	.word	0x00100002
 8002940:	ffff0000 	.word	0xffff0000

08002944 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	@ 0x30
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	461a      	mov	r2, r3
 8002952:	4603      	mov	r3, r0
 8002954:	817b      	strh	r3, [r7, #10]
 8002956:	460b      	mov	r3, r1
 8002958:	813b      	strh	r3, [r7, #8]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800295e:	f7ff fa31 	bl	8001dc4 <HAL_GetTick>
 8002962:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	f040 8214 	bne.w	8002d9a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2319      	movs	r3, #25
 8002978:	2201      	movs	r2, #1
 800297a:	497b      	ldr	r1, [pc, #492]	@ (8002b68 <HAL_I2C_Mem_Read+0x224>)
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fb91 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
 800298a:	e207      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_I2C_Mem_Read+0x56>
 8002996:	2302      	movs	r3, #2
 8002998:	e200      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d007      	beq.n	80029c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2222      	movs	r2, #34	@ 0x22
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2240      	movs	r2, #64	@ 0x40
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80029f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a5b      	ldr	r2, [pc, #364]	@ (8002b6c <HAL_I2C_Mem_Read+0x228>)
 8002a00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a02:	88f8      	ldrh	r0, [r7, #6]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	4603      	mov	r3, r0
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa5e 	bl	8002ed4 <I2C_RequestMemoryRead>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e1bc      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d113      	bne.n	8002a52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e190      	b.n	8002d74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d11b      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e170      	b.n	8002d74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d11b      	bne.n	8002ad2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	e150      	b.n	8002d74 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ae8:	e144      	b.n	8002d74 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	f200 80f1 	bhi.w	8002cd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d123      	bne.n	8002b44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fc79 	bl	80033f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e145      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b42:	e117      	b.n	8002d74 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d14e      	bne.n	8002bea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b52:	2200      	movs	r2, #0
 8002b54:	4906      	ldr	r1, [pc, #24]	@ (8002b70 <HAL_I2C_Mem_Read+0x22c>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 faa4 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e11a      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
 8002b66:	bf00      	nop
 8002b68:	00100002 	.word	0x00100002
 8002b6c:	ffff0000 	.word	0xffff0000
 8002b70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002be8:	e0c4      	b.n	8002d74 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	496c      	ldr	r1, [pc, #432]	@ (8002da4 <HAL_I2C_Mem_Read+0x460>)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fa55 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0cb      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4955      	ldr	r1, [pc, #340]	@ (8002da4 <HAL_I2C_Mem_Read+0x460>)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fa27 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e09d      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cd4:	e04e      	b.n	8002d74 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fb8c 	bl	80033f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e058      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d124      	bne.n	8002d74 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d40:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f aeb6 	bne.w	8002aea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3728      	adds	r7, #40	@ 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	00010004 	.word	0x00010004

08002da8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f960 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df8:	d103      	bne.n	8002e02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e05f      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	492d      	ldr	r1, [pc, #180]	@ (8002ed0 <I2C_RequestMemoryWrite+0x128>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f9bb 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e04c      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fa46 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e02b      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e021      	b.n	8002ec4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa20 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d107      	bne.n	8002eb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e005      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eba:	893b      	ldrh	r3, [r7, #8]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	00010002 	.word	0x00010002

08002ed4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002efc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f8c2 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f34:	d103      	bne.n	8002f3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0aa      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	4952      	ldr	r1, [pc, #328]	@ (80030a0 <I2C_RequestMemoryRead+0x1cc>)
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f91d 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e097      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f9a8 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e076      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb0:	893b      	ldrh	r3, [r7, #8]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	e021      	b.n	8003000 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fbc:	893b      	ldrh	r3, [r7, #8]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f982 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d107      	bne.n	8002ff2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e050      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff6:	893b      	ldrh	r3, [r7, #8]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003002:	6a39      	ldr	r1, [r7, #32]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f967 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e035      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800303a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2200      	movs	r2, #0
 8003044:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f82b 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003062:	d103      	bne.n	800306c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e013      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003070:	897b      	ldrh	r3, [r7, #10]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	4906      	ldr	r1, [pc, #24]	@ (80030a0 <I2C_RequestMemoryRead+0x1cc>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f886 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	00010002 	.word	0x00010002

080030a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b4:	e048      	b.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d044      	beq.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe fe81 	bl	8001dc4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d139      	bne.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10d      	bne.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	e00c      	b.n	8003114 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	429a      	cmp	r2, r3
 8003118:	d116      	bne.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e023      	b.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10d      	bne.n	800316e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	e00c      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	43da      	mvns	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	429a      	cmp	r2, r3
 800318c:	d093      	beq.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a6:	e071      	b.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b6:	d123      	bne.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e067      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d041      	beq.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003208:	f7fe fddc 	bl	8001dc4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d136      	bne.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e00b      	b.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e021      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10c      	bne.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	43da      	mvns	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e00b      	b.n	80032c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f af6d 	bne.w	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e4:	e034      	b.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f8e3 	bl	80034b2 <I2C_IsAcknowledgeFailed>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e034      	b.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d028      	beq.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fe fd61 	bl	8001dc4 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11d      	bne.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d016      	beq.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e007      	b.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335a:	2b80      	cmp	r3, #128	@ 0x80
 800335c:	d1c3      	bne.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003374:	e034      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f89b 	bl	80034b2 <I2C_IsAcknowledgeFailed>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e034      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d028      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fe fd19 	bl	8001dc4 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d11d      	bne.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d016      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d1c3      	bne.n	8003376 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003404:	e049      	b.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	d119      	bne.n	8003448 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e030      	b.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003448:	f7fe fcbc 	bl	8001dc4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	429a      	cmp	r2, r3
 8003456:	d302      	bcc.n	800345e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11d      	bne.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d016      	beq.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f043 0220 	orr.w	r2, r3, #32
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e007      	b.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a4:	2b40      	cmp	r3, #64	@ 0x40
 80034a6:	d1ae      	bne.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c8:	d11b      	bne.n	8003502 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0cc      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b68      	ldr	r3, [pc, #416]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90c      	bls.n	800354c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b65      	ldr	r3, [pc, #404]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a58      	ldr	r2, [pc, #352]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800356e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a52      	ldr	r2, [pc, #328]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d119      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3f      	ldr	r3, [pc, #252]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b37      	ldr	r3, [pc, #220]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4934      	ldr	r1, [pc, #208]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fe fbe0 	bl	8001dc4 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe fbdc 	bl	8001dc4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b25      	ldr	r3, [pc, #148]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20c      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b22      	ldr	r3, [pc, #136]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003682:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f855 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fb40 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08006968 	.word	0x08006968
 80036d4:	20000004 	.word	0x20000004
 80036d8:	20000008 	.word	0x20000008

080036dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e0:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036f8:	f7ff fff0 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0a9b      	lsrs	r3, r3, #10
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	@ (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	08006978 	.word	0x08006978

0800371c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003720:	f7ff ffdc 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0b5b      	lsrs	r3, r3, #13
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	@ (8003740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	08006978 	.word	0x08006978

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b0ae      	sub	sp, #184	@ 0xb8
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376a:	4bcb      	ldr	r3, [pc, #812]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b0c      	cmp	r3, #12
 8003774:	f200 8206 	bhi.w	8003b84 <HAL_RCC_GetSysClockFreq+0x440>
 8003778:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <HAL_RCC_GetSysClockFreq+0x3c>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037b5 	.word	0x080037b5
 8003784:	08003b85 	.word	0x08003b85
 8003788:	08003b85 	.word	0x08003b85
 800378c:	08003b85 	.word	0x08003b85
 8003790:	080037bd 	.word	0x080037bd
 8003794:	08003b85 	.word	0x08003b85
 8003798:	08003b85 	.word	0x08003b85
 800379c:	08003b85 	.word	0x08003b85
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	08003b85 	.word	0x08003b85
 80037a8:	08003b85 	.word	0x08003b85
 80037ac:	08003b85 	.word	0x08003b85
 80037b0:	080039b5 	.word	0x080039b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4bb9      	ldr	r3, [pc, #740]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x358>)
 80037b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037ba:	e1e7      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037bc:	4bb8      	ldr	r3, [pc, #736]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80037be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037c2:	e1e3      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c4:	4bb4      	ldr	r3, [pc, #720]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d071      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037dc:	4bae      	ldr	r3, [pc, #696]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80037ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003802:	4622      	mov	r2, r4
 8003804:	462b      	mov	r3, r5
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	0159      	lsls	r1, r3, #5
 8003810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003814:	0150      	lsls	r0, r2, #5
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4621      	mov	r1, r4
 800381c:	1a51      	subs	r1, r2, r1
 800381e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003820:	4629      	mov	r1, r5
 8003822:	eb63 0301 	sbc.w	r3, r3, r1
 8003826:	647b      	str	r3, [r7, #68]	@ 0x44
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003834:	4649      	mov	r1, r9
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	4641      	mov	r1, r8
 800383a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383e:	4641      	mov	r1, r8
 8003840:	018a      	lsls	r2, r1, #6
 8003842:	4641      	mov	r1, r8
 8003844:	1a51      	subs	r1, r2, r1
 8003846:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003848:	4649      	mov	r1, r9
 800384a:	eb63 0301 	sbc.w	r3, r3, r1
 800384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800385c:	4649      	mov	r1, r9
 800385e:	00cb      	lsls	r3, r1, #3
 8003860:	4641      	mov	r1, r8
 8003862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003866:	4641      	mov	r1, r8
 8003868:	00ca      	lsls	r2, r1, #3
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	4603      	mov	r3, r0
 8003870:	4622      	mov	r2, r4
 8003872:	189b      	adds	r3, r3, r2
 8003874:	633b      	str	r3, [r7, #48]	@ 0x30
 8003876:	462b      	mov	r3, r5
 8003878:	460a      	mov	r2, r1
 800387a:	eb42 0303 	adc.w	r3, r2, r3
 800387e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800388c:	4629      	mov	r1, r5
 800388e:	024b      	lsls	r3, r1, #9
 8003890:	4621      	mov	r1, r4
 8003892:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003896:	4621      	mov	r1, r4
 8003898:	024a      	lsls	r2, r1, #9
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80038b0:	f7fd f924 	bl	8000afc <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038be:	e067      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c0:	4b75      	ldr	r3, [pc, #468]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80038d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038da:	2300      	movs	r3, #0
 80038dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	f04f 0000 	mov.w	r0, #0
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f4:	0150      	lsls	r0, r2, #5
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4621      	mov	r1, r4
 80038fc:	1a51      	subs	r1, r2, r1
 80038fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003900:	4629      	mov	r1, r5
 8003902:	eb63 0301 	sbc.w	r3, r3, r1
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003914:	4649      	mov	r1, r9
 8003916:	018b      	lsls	r3, r1, #6
 8003918:	4641      	mov	r1, r8
 800391a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800391e:	4641      	mov	r1, r8
 8003920:	018a      	lsls	r2, r1, #6
 8003922:	4641      	mov	r1, r8
 8003924:	ebb2 0a01 	subs.w	sl, r2, r1
 8003928:	4649      	mov	r1, r9
 800392a:	eb63 0b01 	sbc.w	fp, r3, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800393a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800393e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003942:	4692      	mov	sl, r2
 8003944:	469b      	mov	fp, r3
 8003946:	4623      	mov	r3, r4
 8003948:	eb1a 0303 	adds.w	r3, sl, r3
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	462b      	mov	r3, r5
 8003950:	eb4b 0303 	adc.w	r3, fp, r3
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003962:	4629      	mov	r1, r5
 8003964:	028b      	lsls	r3, r1, #10
 8003966:	4621      	mov	r1, r4
 8003968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800396c:	4621      	mov	r1, r4
 800396e:	028a      	lsls	r2, r1, #10
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003978:	2200      	movs	r2, #0
 800397a:	673b      	str	r3, [r7, #112]	@ 0x70
 800397c:	677a      	str	r2, [r7, #116]	@ 0x74
 800397e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003982:	f7fd f8bb 	bl	8000afc <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4613      	mov	r3, r2
 800398c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003990:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	3301      	adds	r3, #1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80039a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039b2:	e0eb      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b4:	4b38      	ldr	r3, [pc, #224]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c0:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d06b      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039cc:	4b32      	ldr	r3, [pc, #200]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	099b      	lsrs	r3, r3, #6
 80039d2:	2200      	movs	r2, #0
 80039d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	663b      	str	r3, [r7, #96]	@ 0x60
 80039e0:	2300      	movs	r3, #0
 80039e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039e8:	4622      	mov	r2, r4
 80039ea:	462b      	mov	r3, r5
 80039ec:	f04f 0000 	mov.w	r0, #0
 80039f0:	f04f 0100 	mov.w	r1, #0
 80039f4:	0159      	lsls	r1, r3, #5
 80039f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039fa:	0150      	lsls	r0, r2, #5
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4621      	mov	r1, r4
 8003a02:	1a51      	subs	r1, r2, r1
 8003a04:	61b9      	str	r1, [r7, #24]
 8003a06:	4629      	mov	r1, r5
 8003a08:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a1a:	4659      	mov	r1, fp
 8003a1c:	018b      	lsls	r3, r1, #6
 8003a1e:	4651      	mov	r1, sl
 8003a20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a24:	4651      	mov	r1, sl
 8003a26:	018a      	lsls	r2, r1, #6
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ebb2 0801 	subs.w	r8, r2, r1
 8003a2e:	4659      	mov	r1, fp
 8003a30:	eb63 0901 	sbc.w	r9, r3, r1
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a48:	4690      	mov	r8, r2
 8003a4a:	4699      	mov	r9, r3
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	eb18 0303 	adds.w	r3, r8, r3
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	462b      	mov	r3, r5
 8003a56:	eb49 0303 	adc.w	r3, r9, r3
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a68:	4629      	mov	r1, r5
 8003a6a:	024b      	lsls	r3, r1, #9
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a72:	4621      	mov	r1, r4
 8003a74:	024a      	lsls	r2, r1, #9
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a7e:	2200      	movs	r2, #0
 8003a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a88:	f7fd f838 	bl	8000afc <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a96:	e065      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x420>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x458>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	4611      	mov	r1, r2
 8003ab0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ab4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003abe:	4642      	mov	r2, r8
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	0159      	lsls	r1, r3, #5
 8003acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad0:	0150      	lsls	r0, r2, #5
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	1a51      	subs	r1, r2, r1
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	4649      	mov	r1, r9
 8003ade:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003af0:	4659      	mov	r1, fp
 8003af2:	018b      	lsls	r3, r1, #6
 8003af4:	4651      	mov	r1, sl
 8003af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afa:	4651      	mov	r1, sl
 8003afc:	018a      	lsls	r2, r1, #6
 8003afe:	4651      	mov	r1, sl
 8003b00:	1a54      	subs	r4, r2, r1
 8003b02:	4659      	mov	r1, fp
 8003b04:	eb63 0501 	sbc.w	r5, r3, r1
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	00eb      	lsls	r3, r5, #3
 8003b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b16:	00e2      	lsls	r2, r4, #3
 8003b18:	4614      	mov	r4, r2
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	18e3      	adds	r3, r4, r3
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	464b      	mov	r3, r9
 8003b24:	eb45 0303 	adc.w	r3, r5, r3
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b50:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b56:	f7fc ffd1 	bl	8000afc <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b64:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0f1b      	lsrs	r3, r3, #28
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b82:	e003      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	37b8      	adds	r7, #184	@ 0xb8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	00f42400 	.word	0x00f42400

08003ba4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e28d      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8083 	beq.w	8003cca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bc4:	4b94      	ldr	r3, [pc, #592]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d019      	beq.n	8003c04 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bd0:	4b91      	ldr	r3, [pc, #580]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be8:	d00c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bea:	4b8b      	ldr	r3, [pc, #556]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	d112      	bne.n	8003c1c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf6:	4b88      	ldr	r3, [pc, #544]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c02:	d10b      	bne.n	8003c1c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	4b84      	ldr	r3, [pc, #528]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d05b      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x124>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d157      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e25a      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c24:	d106      	bne.n	8003c34 <HAL_RCC_OscConfig+0x90>
 8003c26:	4b7c      	ldr	r3, [pc, #496]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01d      	b.n	8003c70 <HAL_RCC_OscConfig+0xcc>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0xb4>
 8003c3e:	4b76      	ldr	r3, [pc, #472]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b73      	ldr	r3, [pc, #460]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a72      	ldr	r2, [pc, #456]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xcc>
 8003c58:	4b6f      	ldr	r3, [pc, #444]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b6c      	ldr	r3, [pc, #432]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6b      	ldr	r2, [pc, #428]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe f8a4 	bl	8001dc4 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe f8a0 	bl	8001dc4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e21f      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b61      	ldr	r3, [pc, #388]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0xdc>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f890 	bl	8001dc4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fe f88c 	bl	8001dc4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	@ 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e20b      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	4b57      	ldr	r3, [pc, #348]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x104>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d06f      	beq.n	8003db6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cd6:	4b50      	ldr	r3, [pc, #320]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d017      	beq.n	8003d12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d105      	bne.n	8003cfa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cee:	4b4a      	ldr	r3, [pc, #296]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d11c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d06:	4b44      	ldr	r3, [pc, #272]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x186>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1d3      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4937      	ldr	r1, [pc, #220]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e03a      	b.n	8003db6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b34      	ldr	r3, [pc, #208]	@ (8003e1c <HAL_RCC_OscConfig+0x278>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f839 	bl	8001dc4 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fe f835 	bl	8001dc4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1b4      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	4b2b      	ldr	r3, [pc, #172]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b28      	ldr	r3, [pc, #160]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4925      	ldr	r1, [pc, #148]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8a:	4b24      	ldr	r3, [pc, #144]	@ (8003e1c <HAL_RCC_OscConfig+0x278>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe f818 	bl	8001dc4 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fe f814 	bl	8001dc4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e193      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d036      	beq.n	8003e30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dca:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd fff8 	bl	8001dc4 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7fd fff4 	bl	8001dc4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e173      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x234>
 8003df6:	e01b      	b.n	8003e30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df8:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd ffe1 	bl	8001dc4 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	e00e      	b.n	8003e24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd ffdd 	bl	8001dc4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d907      	bls.n	8003e24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e15c      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470000 	.word	0x42470000
 8003e20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	4b8a      	ldr	r3, [pc, #552]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ea      	bne.n	8003e06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8097 	beq.w	8003f6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e42:	4b83      	ldr	r3, [pc, #524]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	4b7f      	ldr	r3, [pc, #508]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	4a7e      	ldr	r2, [pc, #504]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b79      	ldr	r3, [pc, #484]	@ (8004054 <HAL_RCC_OscConfig+0x4b0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b76      	ldr	r3, [pc, #472]	@ (8004054 <HAL_RCC_OscConfig+0x4b0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a75      	ldr	r2, [pc, #468]	@ (8004054 <HAL_RCC_OscConfig+0x4b0>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fd ff9d 	bl	8001dc4 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fd ff99 	bl	8001dc4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e118      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8004054 <HAL_RCC_OscConfig+0x4b0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x31e>
 8003eb4:	4b66      	ldr	r3, [pc, #408]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	4a65      	ldr	r2, [pc, #404]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec0:	e01c      	b.n	8003efc <HAL_RCC_OscConfig+0x358>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x340>
 8003eca:	4b61      	ldr	r3, [pc, #388]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	4a60      	ldr	r2, [pc, #384]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eda:	4a5d      	ldr	r2, [pc, #372]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0x358>
 8003ee4:	4b5a      	ldr	r3, [pc, #360]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	4a59      	ldr	r2, [pc, #356]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef0:	4b57      	ldr	r3, [pc, #348]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef4:	4a56      	ldr	r2, [pc, #344]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd ff5e 	bl	8001dc4 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fd ff5a 	bl	8001dc4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0d7      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	4b4b      	ldr	r3, [pc, #300]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ee      	beq.n	8003f0c <HAL_RCC_OscConfig+0x368>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fd ff48 	bl	8001dc4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd ff44 	bl	8001dc4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0c1      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4e:	4b40      	ldr	r3, [pc, #256]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ee      	bne.n	8003f38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	4a3a      	ldr	r2, [pc, #232]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80ad 	beq.w	80040d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f76:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d060      	beq.n	8004044 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d145      	bne.n	8004016 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b33      	ldr	r3, [pc, #204]	@ (8004058 <HAL_RCC_OscConfig+0x4b4>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd ff18 	bl	8001dc4 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd ff14 	bl	8001dc4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e093      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b29      	ldr	r3, [pc, #164]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	491b      	ldr	r1, [pc, #108]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <HAL_RCC_OscConfig+0x4b4>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd fee9 	bl	8001dc4 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fd fee5 	bl	8001dc4 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e064      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x452>
 8004014:	e05c      	b.n	80040d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <HAL_RCC_OscConfig+0x4b4>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd fed2 	bl	8001dc4 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd fece 	bl	8001dc4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e04d      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_RCC_OscConfig+0x4ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x480>
 8004042:	e045      	b.n	80040d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e040      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
 8004050:	40023800 	.word	0x40023800
 8004054:	40007000 	.word	0x40007000
 8004058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800405c:	4b1f      	ldr	r3, [pc, #124]	@ (80040dc <HAL_RCC_OscConfig+0x538>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d030      	beq.n	80040cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d129      	bne.n	80040cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d122      	bne.n	80040cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004094:	4293      	cmp	r3, r2
 8004096:	d119      	bne.n	80040cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	3b01      	subs	r3, #1
 80040a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d10f      	bne.n	80040cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800

080040e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e041      	b.n	8004176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fc3c 	bl	8001984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f000 f9b8 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_TIM_PWM_Start+0x24>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e022      	b.n	80041ea <HAL_TIM_PWM_Start+0x6a>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d109      	bne.n	80041be <HAL_TIM_PWM_Start+0x3e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	e015      	b.n	80041ea <HAL_TIM_PWM_Start+0x6a>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d109      	bne.n	80041d8 <HAL_TIM_PWM_Start+0x58>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e008      	b.n	80041ea <HAL_TIM_PWM_Start+0x6a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e07c      	b.n	80042ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start+0x82>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004200:	e013      	b.n	800422a <HAL_TIM_PWM_Start+0xaa>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start+0x92>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004210:	e00b      	b.n	800422a <HAL_TIM_PWM_Start+0xaa>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start+0xa2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004220:	e003      	b.n	800422a <HAL_TIM_PWM_Start+0xaa>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fb84 	bl	8004940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2d      	ldr	r2, [pc, #180]	@ (80042f4 <HAL_TIM_PWM_Start+0x174>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_PWM_Start+0xcc>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2c      	ldr	r2, [pc, #176]	@ (80042f8 <HAL_TIM_PWM_Start+0x178>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_TIM_PWM_Start+0xd0>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_TIM_PWM_Start+0xd2>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a22      	ldr	r2, [pc, #136]	@ (80042f4 <HAL_TIM_PWM_Start+0x174>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x136>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004278:	d01d      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x136>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <HAL_TIM_PWM_Start+0x17c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x136>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <HAL_TIM_PWM_Start+0x180>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x136>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <HAL_TIM_PWM_Start+0x184>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x136>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a16      	ldr	r2, [pc, #88]	@ (80042f8 <HAL_TIM_PWM_Start+0x178>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x136>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_TIM_PWM_Start+0x188>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIM_PWM_Start+0x136>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a16      	ldr	r2, [pc, #88]	@ (800430c <HAL_TIM_PWM_Start+0x18c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d111      	bne.n	80042da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b06      	cmp	r3, #6
 80042c6:	d010      	beq.n	80042ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	e007      	b.n	80042ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0201 	orr.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40010400 	.word	0x40010400
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40014000 	.word	0x40014000
 800430c:	40001800 	.word	0x40001800

08004310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800432a:	2302      	movs	r3, #2
 800432c:	e0ae      	b.n	800448c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	f200 809f 	bhi.w	800447c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004379 	.word	0x08004379
 8004348:	0800447d 	.word	0x0800447d
 800434c:	0800447d 	.word	0x0800447d
 8004350:	0800447d 	.word	0x0800447d
 8004354:	080043b9 	.word	0x080043b9
 8004358:	0800447d 	.word	0x0800447d
 800435c:	0800447d 	.word	0x0800447d
 8004360:	0800447d 	.word	0x0800447d
 8004364:	080043fb 	.word	0x080043fb
 8004368:	0800447d 	.word	0x0800447d
 800436c:	0800447d 	.word	0x0800447d
 8004370:	0800447d 	.word	0x0800447d
 8004374:	0800443b 	.word	0x0800443b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f92e 	bl	80045e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6999      	ldr	r1, [r3, #24]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	619a      	str	r2, [r3, #24]
      break;
 80043b6:	e064      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f97e 	bl	80046c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6999      	ldr	r1, [r3, #24]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	619a      	str	r2, [r3, #24]
      break;
 80043f8:	e043      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f9d3 	bl	80047ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0208 	orr.w	r2, r2, #8
 8004414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0204 	bic.w	r2, r2, #4
 8004424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69d9      	ldr	r1, [r3, #28]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	61da      	str	r2, [r3, #28]
      break;
 8004438:	e023      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa27 	bl	8004894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69d9      	ldr	r1, [r3, #28]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	021a      	lsls	r2, r3, #8
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	61da      	str	r2, [r3, #28]
      break;
 800447a:	e002      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
      break;
 8004480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800448a:	7dfb      	ldrb	r3, [r7, #23]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a43      	ldr	r2, [pc, #268]	@ (80045b4 <TIM_Base_SetConfig+0x120>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b2:	d00f      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a40      	ldr	r2, [pc, #256]	@ (80045b8 <TIM_Base_SetConfig+0x124>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a3f      	ldr	r2, [pc, #252]	@ (80045bc <TIM_Base_SetConfig+0x128>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a3e      	ldr	r2, [pc, #248]	@ (80045c0 <TIM_Base_SetConfig+0x12c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3d      	ldr	r2, [pc, #244]	@ (80045c4 <TIM_Base_SetConfig+0x130>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d108      	bne.n	80044e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a32      	ldr	r2, [pc, #200]	@ (80045b4 <TIM_Base_SetConfig+0x120>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d02b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f4:	d027      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2f      	ldr	r2, [pc, #188]	@ (80045b8 <TIM_Base_SetConfig+0x124>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d023      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2e      	ldr	r2, [pc, #184]	@ (80045bc <TIM_Base_SetConfig+0x128>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01f      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2d      	ldr	r2, [pc, #180]	@ (80045c0 <TIM_Base_SetConfig+0x12c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2c      	ldr	r2, [pc, #176]	@ (80045c4 <TIM_Base_SetConfig+0x130>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d017      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2b      	ldr	r2, [pc, #172]	@ (80045c8 <TIM_Base_SetConfig+0x134>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2a      	ldr	r2, [pc, #168]	@ (80045cc <TIM_Base_SetConfig+0x138>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00f      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <TIM_Base_SetConfig+0x13c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a28      	ldr	r2, [pc, #160]	@ (80045d4 <TIM_Base_SetConfig+0x140>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a27      	ldr	r2, [pc, #156]	@ (80045d8 <TIM_Base_SetConfig+0x144>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <TIM_Base_SetConfig+0x148>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a0e      	ldr	r2, [pc, #56]	@ (80045b4 <TIM_Base_SetConfig+0x120>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_Base_SetConfig+0xf2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <TIM_Base_SetConfig+0x130>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d103      	bne.n	800458e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800
 80045d4:	40001800 	.word	0x40001800
 80045d8:	40001c00 	.word	0x40001c00
 80045dc:	40002000 	.word	0x40002000

080045e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 0201 	bic.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0302 	bic.w	r3, r3, #2
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a20      	ldr	r2, [pc, #128]	@ (80046b8 <TIM_OC1_SetConfig+0xd8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_OC1_SetConfig+0x64>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a1f      	ldr	r2, [pc, #124]	@ (80046bc <TIM_OC1_SetConfig+0xdc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10c      	bne.n	800465e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0308 	bic.w	r3, r3, #8
 800464a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a15      	ldr	r2, [pc, #84]	@ (80046b8 <TIM_OC1_SetConfig+0xd8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_OC1_SetConfig+0x8e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a14      	ldr	r2, [pc, #80]	@ (80046bc <TIM_OC1_SetConfig+0xdc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d111      	bne.n	8004692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f023 0210 	bic.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f023 0320 	bic.w	r3, r3, #32
 800470a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a22      	ldr	r2, [pc, #136]	@ (80047a4 <TIM_OC2_SetConfig+0xe4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_OC2_SetConfig+0x68>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <TIM_OC2_SetConfig+0xe8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10d      	bne.n	8004744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800472e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a17      	ldr	r2, [pc, #92]	@ (80047a4 <TIM_OC2_SetConfig+0xe4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_OC2_SetConfig+0x94>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a16      	ldr	r2, [pc, #88]	@ (80047a8 <TIM_OC2_SetConfig+0xe8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d113      	bne.n	800477c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800475a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40010400 	.word	0x40010400

080047ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a21      	ldr	r2, [pc, #132]	@ (800488c <TIM_OC3_SetConfig+0xe0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC3_SetConfig+0x66>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a20      	ldr	r2, [pc, #128]	@ (8004890 <TIM_OC3_SetConfig+0xe4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10d      	bne.n	800482e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800482c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a16      	ldr	r2, [pc, #88]	@ (800488c <TIM_OC3_SetConfig+0xe0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_OC3_SetConfig+0x92>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a15      	ldr	r2, [pc, #84]	@ (8004890 <TIM_OC3_SetConfig+0xe4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d113      	bne.n	8004866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40010000 	.word	0x40010000
 8004890:	40010400 	.word	0x40010400

08004894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	031b      	lsls	r3, r3, #12
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a12      	ldr	r2, [pc, #72]	@ (8004938 <TIM_OC4_SetConfig+0xa4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC4_SetConfig+0x68>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a11      	ldr	r2, [pc, #68]	@ (800493c <TIM_OC4_SetConfig+0xa8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d109      	bne.n	8004910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	019b      	lsls	r3, r3, #6
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	40010400 	.word	0x40010400

08004940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2201      	movs	r2, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1a      	ldr	r2, [r3, #32]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	43db      	mvns	r3, r3
 8004962:	401a      	ands	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	431a      	orrs	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e05a      	b.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a21      	ldr	r2, [pc, #132]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f0:	d01d      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1b      	ldr	r2, [pc, #108]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a18      	ldr	r2, [pc, #96]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a15      	ldr	r2, [pc, #84]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10c      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40001800 	.word	0x40001800

08004a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc ffe2 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fdd3 	bl	8005674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	@ 0x28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d175      	bne.n	8004c30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x2c>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e06e      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2221      	movs	r2, #33	@ 0x21
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fd f92f 	bl	8001dc4 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7c:	d108      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b98:	e02e      	b.n	8004bf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2180      	movs	r1, #128	@ 0x80
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fb37 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e03a      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e007      	b.n	8004bea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1cb      	bne.n	8004b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2140      	movs	r1, #64	@ 0x40
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fb03 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e006      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	4613      	mov	r3, r2
 8004c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d112      	bne.n	8004c7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UART_Receive_IT+0x26>
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e00b      	b.n	8004c7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb2a 	bl	80052ca <UART_Start_Receive_IT>
 8004c76:	4603      	mov	r3, r0
 8004c78:	e000      	b.n	8004c7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c7a:	2302      	movs	r3, #2
  }
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b0ba      	sub	sp, #232	@ 0xe8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_UART_IRQHandler+0x66>
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fc07 	bl	80054f6 <UART_Receive_IT>
      return;
 8004ce8:	e273      	b.n	80051d2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80de 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x22c>
 8004cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80d1 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_UART_IRQHandler+0xae>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_UART_IRQHandler+0xd2>
 8004d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f043 0202 	orr.w	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xf6>
 8004d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d011      	beq.n	8004daa <HAL_UART_IRQHandler+0x126>
 8004d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f043 0208 	orr.w	r2, r3, #8
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 820a 	beq.w	80051c8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x14e>
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fb92 	bl	80054f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	2b40      	cmp	r3, #64	@ 0x40
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <HAL_UART_IRQHandler+0x17a>
 8004df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04f      	beq.n	8004e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa9d 	bl	800533e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0e:	2b40      	cmp	r3, #64	@ 0x40
 8004e10:	d141      	bne.n	8004e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1d9      	bne.n	8004e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d013      	beq.n	8004e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	4a8a      	ldr	r2, [pc, #552]	@ (8005094 <HAL_UART_IRQHandler+0x410>)
 8004e6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd f957 	bl	8002126 <HAL_DMA_Abort_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e00e      	b.n	8004eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9ac 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	e00a      	b.n	8004eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9a8 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	e006      	b.n	8004eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9a4 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004eaa:	e18d      	b.n	80051c8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	bf00      	nop
    return;
 8004eae:	e18b      	b.n	80051c8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 8167 	bne.w	8005188 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 8160 	beq.w	8005188 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8159 	beq.w	8005188 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	f040 80ce 	bne.w	8005098 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a9 	beq.w	8005064 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	f080 80a2 	bcs.w	8005064 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f32:	f000 8088 	beq.w	8005046 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3314      	adds	r3, #20
 8004f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e1      	bne.n	8004f82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3314      	adds	r3, #20
 8004fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e3      	bne.n	8004fbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005016:	f023 0310 	bic.w	r3, r3, #16
 800501a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005028:	65ba      	str	r2, [r7, #88]	@ 0x58
 800502a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800502e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e3      	bne.n	8005004 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005040:	4618      	mov	r0, r3
 8005042:	f7fd f800 	bl	8002046 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005054:	b29b      	uxth	r3, r3
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	b29b      	uxth	r3, r3
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f8cf 	bl	8005200 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005062:	e0b3      	b.n	80051cc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800506c:	429a      	cmp	r2, r3
 800506e:	f040 80ad 	bne.w	80051cc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800507c:	f040 80a6 	bne.w	80051cc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f8b7 	bl	8005200 <HAL_UARTEx_RxEventCallback>
      return;
 8005092:	e09b      	b.n	80051cc <HAL_UART_IRQHandler+0x548>
 8005094:	08005405 	.word	0x08005405
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 808e 	beq.w	80051d0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80050b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8089 	beq.w	80051d0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e3      	bne.n	80050be <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3314      	adds	r3, #20
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	623b      	str	r3, [r7, #32]
   return(result);
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3314      	adds	r3, #20
 8005116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800511a:	633a      	str	r2, [r7, #48]	@ 0x30
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e3      	bne.n	80050f6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	60fb      	str	r3, [r7, #12]
   return(result);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0310 	bic.w	r3, r3, #16
 8005152:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	330c      	adds	r3, #12
 800515c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	69b9      	ldr	r1, [r7, #24]
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	617b      	str	r3, [r7, #20]
   return(result);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e3      	bne.n	800513c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800517a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f83d 	bl	8005200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005186:	e023      	b.n	80051d0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800518c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <HAL_UART_IRQHandler+0x524>
 8005194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f940 	bl	8005426 <UART_Transmit_IT>
    return;
 80051a6:	e014      	b.n	80051d2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <HAL_UART_IRQHandler+0x54e>
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f980 	bl	80054c6 <UART_EndTransmit_IT>
    return;
 80051c6:	e004      	b.n	80051d2 <HAL_UART_IRQHandler+0x54e>
    return;
 80051c8:	bf00      	nop
 80051ca:	e002      	b.n	80051d2 <HAL_UART_IRQHandler+0x54e>
      return;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <HAL_UART_IRQHandler+0x54e>
      return;
 80051d0:	bf00      	nop
  }
}
 80051d2:	37e8      	adds	r7, #232	@ 0xe8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005228:	e03b      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d037      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005232:	f7fc fdc7 	bl	8001dc4 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <UART_WaitOnFlagUntilTimeout+0x30>
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e03a      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d023      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b80      	cmp	r3, #128	@ 0x80
 800525e:	d020      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	d01d      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d116      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f857 	bl	800533e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2208      	movs	r2, #8
 8005294:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e00f      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d0b4      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	4613      	mov	r3, r2
 80052d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2222      	movs	r2, #34	@ 0x22
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800530e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0220 	orr.w	r2, r2, #32
 800532e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800533e:	b480      	push	{r7}
 8005340:	b095      	sub	sp, #84	@ 0x54
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800535c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005366:	643a      	str	r2, [r7, #64]	@ 0x40
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800536c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3314      	adds	r3, #20
 8005380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	61fb      	str	r3, [r7, #28]
   return(result);
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3314      	adds	r3, #20
 8005398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800539a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800539c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e5      	bne.n	800537a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d119      	bne.n	80053ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f023 0310 	bic.w	r3, r3, #16
 80053cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053d6:	61ba      	str	r2, [r7, #24]
 80053d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6979      	ldr	r1, [r7, #20]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	613b      	str	r3, [r7, #16]
   return(result);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e5      	bne.n	80053b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053f8:	bf00      	nop
 80053fa:	3754      	adds	r7, #84	@ 0x54
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff fee7 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005426:	b480      	push	{r7}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b21      	cmp	r3, #33	@ 0x21
 8005438:	d13e      	bne.n	80054b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005442:	d114      	bne.n	800546e <UART_Transmit_IT+0x48>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d110      	bne.n	800546e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005460:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	1c9a      	adds	r2, r3, #2
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]
 800546c:	e008      	b.n	8005480 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	1c59      	adds	r1, r3, #1
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6211      	str	r1, [r2, #32]
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4619      	mov	r1, r3
 800548e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10f      	bne.n	80054b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fe76 	bl	80051d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b08c      	sub	sp, #48	@ 0x30
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b22      	cmp	r3, #34	@ 0x22
 8005510:	f040 80aa 	bne.w	8005668 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551c:	d115      	bne.n	800554a <UART_Receive_IT+0x54>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d111      	bne.n	800554a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005538:	b29a      	uxth	r2, r3
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	@ 0x28
 8005548:	e024      	b.n	8005594 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005558:	d007      	beq.n	800556a <UART_Receive_IT+0x74>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <UART_Receive_IT+0x82>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e008      	b.n	800558a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005584:	b2da      	uxtb	r2, r3
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29b      	uxth	r3, r3
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	4619      	mov	r1, r3
 80055a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d15d      	bne.n	8005664 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0220 	bic.w	r2, r2, #32
 80055b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d135      	bne.n	800565a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	613b      	str	r3, [r7, #16]
   return(result);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 0310 	bic.w	r3, r3, #16
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005614:	623a      	str	r2, [r7, #32]
 8005616:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	69f9      	ldr	r1, [r7, #28]
 800561a:	6a3a      	ldr	r2, [r7, #32]
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	61bb      	str	r3, [r7, #24]
   return(result);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e5      	bne.n	80055f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b10      	cmp	r3, #16
 8005634:	d10a      	bne.n	800564c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fdd4 	bl	8005200 <HAL_UARTEx_RxEventCallback>
 8005658:	e002      	b.n	8005660 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fb fc00 	bl	8000e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e002      	b.n	800566a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3730      	adds	r7, #48	@ 0x30
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005678:	b0c0      	sub	sp, #256	@ 0x100
 800567a:	af00      	add	r7, sp, #0
 800567c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005690:	68d9      	ldr	r1, [r3, #12]
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	ea40 0301 	orr.w	r3, r0, r1
 800569c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056cc:	f021 010c 	bic.w	r1, r1, #12
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056da:	430b      	orrs	r3, r1
 80056dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ee:	6999      	ldr	r1, [r3, #24]
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	ea40 0301 	orr.w	r3, r0, r1
 80056fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b8f      	ldr	r3, [pc, #572]	@ (8005940 <UART_SetConfig+0x2cc>)
 8005704:	429a      	cmp	r2, r3
 8005706:	d005      	beq.n	8005714 <UART_SetConfig+0xa0>
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b8d      	ldr	r3, [pc, #564]	@ (8005944 <UART_SetConfig+0x2d0>)
 8005710:	429a      	cmp	r2, r3
 8005712:	d104      	bne.n	800571e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005714:	f7fe f802 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 8005718:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800571c:	e003      	b.n	8005726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800571e:	f7fd ffe9 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8005722:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005730:	f040 810c 	bne.w	800594c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005738:	2200      	movs	r2, #0
 800573a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800573e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005746:	4622      	mov	r2, r4
 8005748:	462b      	mov	r3, r5
 800574a:	1891      	adds	r1, r2, r2
 800574c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800574e:	415b      	adcs	r3, r3
 8005750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005756:	4621      	mov	r1, r4
 8005758:	eb12 0801 	adds.w	r8, r2, r1
 800575c:	4629      	mov	r1, r5
 800575e:	eb43 0901 	adc.w	r9, r3, r1
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800576e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005776:	4690      	mov	r8, r2
 8005778:	4699      	mov	r9, r3
 800577a:	4623      	mov	r3, r4
 800577c:	eb18 0303 	adds.w	r3, r8, r3
 8005780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005784:	462b      	mov	r3, r5
 8005786:	eb49 0303 	adc.w	r3, r9, r3
 800578a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800579a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800579e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057a2:	460b      	mov	r3, r1
 80057a4:	18db      	adds	r3, r3, r3
 80057a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057a8:	4613      	mov	r3, r2
 80057aa:	eb42 0303 	adc.w	r3, r2, r3
 80057ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80057b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057b8:	f7fb f9a0 	bl	8000afc <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4b61      	ldr	r3, [pc, #388]	@ (8005948 <UART_SetConfig+0x2d4>)
 80057c2:	fba3 2302 	umull	r2, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	011c      	lsls	r4, r3, #4
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057e4:	415b      	adcs	r3, r3
 80057e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057ec:	4641      	mov	r1, r8
 80057ee:	eb12 0a01 	adds.w	sl, r2, r1
 80057f2:	4649      	mov	r1, r9
 80057f4:	eb43 0b01 	adc.w	fp, r3, r1
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800580c:	4692      	mov	sl, r2
 800580e:	469b      	mov	fp, r3
 8005810:	4643      	mov	r3, r8
 8005812:	eb1a 0303 	adds.w	r3, sl, r3
 8005816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800581a:	464b      	mov	r3, r9
 800581c:	eb4b 0303 	adc.w	r3, fp, r3
 8005820:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005830:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005838:	460b      	mov	r3, r1
 800583a:	18db      	adds	r3, r3, r3
 800583c:	643b      	str	r3, [r7, #64]	@ 0x40
 800583e:	4613      	mov	r3, r2
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	647b      	str	r3, [r7, #68]	@ 0x44
 8005846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800584a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800584e:	f7fb f955 	bl	8000afc <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4611      	mov	r1, r2
 8005858:	4b3b      	ldr	r3, [pc, #236]	@ (8005948 <UART_SetConfig+0x2d4>)
 800585a:	fba3 2301 	umull	r2, r3, r3, r1
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	2264      	movs	r2, #100	@ 0x64
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	1acb      	subs	r3, r1, r3
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800586e:	4b36      	ldr	r3, [pc, #216]	@ (8005948 <UART_SetConfig+0x2d4>)
 8005870:	fba3 2302 	umull	r2, r3, r3, r2
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800587c:	441c      	add	r4, r3
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005888:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800588c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005898:	415b      	adcs	r3, r3
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058a0:	4641      	mov	r1, r8
 80058a2:	1851      	adds	r1, r2, r1
 80058a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80058a6:	4649      	mov	r1, r9
 80058a8:	414b      	adcs	r3, r1
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058b8:	4659      	mov	r1, fp
 80058ba:	00cb      	lsls	r3, r1, #3
 80058bc:	4651      	mov	r1, sl
 80058be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c2:	4651      	mov	r1, sl
 80058c4:	00ca      	lsls	r2, r1, #3
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	4642      	mov	r2, r8
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058d4:	464b      	mov	r3, r9
 80058d6:	460a      	mov	r2, r1
 80058d8:	eb42 0303 	adc.w	r3, r2, r3
 80058dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058f4:	460b      	mov	r3, r1
 80058f6:	18db      	adds	r3, r3, r3
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058fa:	4613      	mov	r3, r2
 80058fc:	eb42 0303 	adc.w	r3, r2, r3
 8005900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800590a:	f7fb f8f7 	bl	8000afc <__aeabi_uldivmod>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <UART_SetConfig+0x2d4>)
 8005914:	fba3 1302 	umull	r1, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2164      	movs	r1, #100	@ 0x64
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	3332      	adds	r3, #50	@ 0x32
 8005926:	4a08      	ldr	r2, [pc, #32]	@ (8005948 <UART_SetConfig+0x2d4>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 0207 	and.w	r2, r3, #7
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4422      	add	r2, r4
 800593a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800593c:	e106      	b.n	8005b4c <UART_SetConfig+0x4d8>
 800593e:	bf00      	nop
 8005940:	40011000 	.word	0x40011000
 8005944:	40011400 	.word	0x40011400
 8005948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800594c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005950:	2200      	movs	r2, #0
 8005952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005956:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800595a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800595e:	4642      	mov	r2, r8
 8005960:	464b      	mov	r3, r9
 8005962:	1891      	adds	r1, r2, r2
 8005964:	6239      	str	r1, [r7, #32]
 8005966:	415b      	adcs	r3, r3
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
 800596a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800596e:	4641      	mov	r1, r8
 8005970:	1854      	adds	r4, r2, r1
 8005972:	4649      	mov	r1, r9
 8005974:	eb43 0501 	adc.w	r5, r3, r1
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	00eb      	lsls	r3, r5, #3
 8005982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005986:	00e2      	lsls	r2, r4, #3
 8005988:	4614      	mov	r4, r2
 800598a:	461d      	mov	r5, r3
 800598c:	4643      	mov	r3, r8
 800598e:	18e3      	adds	r3, r4, r3
 8005990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005994:	464b      	mov	r3, r9
 8005996:	eb45 0303 	adc.w	r3, r5, r3
 800599a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059ba:	4629      	mov	r1, r5
 80059bc:	008b      	lsls	r3, r1, #2
 80059be:	4621      	mov	r1, r4
 80059c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059c4:	4621      	mov	r1, r4
 80059c6:	008a      	lsls	r2, r1, #2
 80059c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059cc:	f7fb f896 	bl	8000afc <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4b60      	ldr	r3, [pc, #384]	@ (8005b58 <UART_SetConfig+0x4e4>)
 80059d6:	fba3 2302 	umull	r2, r3, r3, r2
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	011c      	lsls	r4, r3, #4
 80059de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	1891      	adds	r1, r2, r2
 80059f6:	61b9      	str	r1, [r7, #24]
 80059f8:	415b      	adcs	r3, r3
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a00:	4641      	mov	r1, r8
 8005a02:	1851      	adds	r1, r2, r1
 8005a04:	6139      	str	r1, [r7, #16]
 8005a06:	4649      	mov	r1, r9
 8005a08:	414b      	adcs	r3, r1
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a18:	4659      	mov	r1, fp
 8005a1a:	00cb      	lsls	r3, r1, #3
 8005a1c:	4651      	mov	r1, sl
 8005a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a22:	4651      	mov	r1, sl
 8005a24:	00ca      	lsls	r2, r1, #3
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	189b      	adds	r3, r3, r2
 8005a30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a34:	464b      	mov	r3, r9
 8005a36:	460a      	mov	r2, r1
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a58:	4649      	mov	r1, r9
 8005a5a:	008b      	lsls	r3, r1, #2
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a62:	4641      	mov	r1, r8
 8005a64:	008a      	lsls	r2, r1, #2
 8005a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a6a:	f7fb f847 	bl	8000afc <__aeabi_uldivmod>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	4b38      	ldr	r3, [pc, #224]	@ (8005b58 <UART_SetConfig+0x4e4>)
 8005a76:	fba3 2301 	umull	r2, r3, r3, r1
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	2264      	movs	r2, #100	@ 0x64
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	1acb      	subs	r3, r1, r3
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	3332      	adds	r3, #50	@ 0x32
 8005a88:	4a33      	ldr	r2, [pc, #204]	@ (8005b58 <UART_SetConfig+0x4e4>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a94:	441c      	add	r4, r3
 8005a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005aa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	415b      	adcs	r3, r3
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	460a      	mov	r2, r1
 8005aea:	eb42 0303 	adc.w	r3, r2, r3
 8005aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005afa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b08:	4649      	mov	r1, r9
 8005b0a:	008b      	lsls	r3, r1, #2
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b12:	4641      	mov	r1, r8
 8005b14:	008a      	lsls	r2, r1, #2
 8005b16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b1a:	f7fa ffef 	bl	8000afc <__aeabi_uldivmod>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <UART_SetConfig+0x4e4>)
 8005b24:	fba3 1302 	umull	r1, r3, r3, r2
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	2164      	movs	r1, #100	@ 0x64
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	3332      	adds	r3, #50	@ 0x32
 8005b36:	4a08      	ldr	r2, [pc, #32]	@ (8005b58 <UART_SetConfig+0x4e4>)
 8005b38:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	f003 020f 	and.w	r2, r3, #15
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4422      	add	r2, r4
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b58:	51eb851f 	.word	0x51eb851f

08005b5c <atoi>:
 8005b5c:	220a      	movs	r2, #10
 8005b5e:	2100      	movs	r1, #0
 8005b60:	f000 b87a 	b.w	8005c58 <strtol>

08005b64 <_strtol_l.isra.0>:
 8005b64:	2b24      	cmp	r3, #36	@ 0x24
 8005b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6a:	4686      	mov	lr, r0
 8005b6c:	4690      	mov	r8, r2
 8005b6e:	d801      	bhi.n	8005b74 <_strtol_l.isra.0+0x10>
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d106      	bne.n	8005b82 <_strtol_l.isra.0+0x1e>
 8005b74:	f000 f8cc 	bl	8005d10 <__errno>
 8005b78:	2316      	movs	r3, #22
 8005b7a:	6003      	str	r3, [r0, #0]
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b82:	4834      	ldr	r0, [pc, #208]	@ (8005c54 <_strtol_l.isra.0+0xf0>)
 8005b84:	460d      	mov	r5, r1
 8005b86:	462a      	mov	r2, r5
 8005b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b8c:	5d06      	ldrb	r6, [r0, r4]
 8005b8e:	f016 0608 	ands.w	r6, r6, #8
 8005b92:	d1f8      	bne.n	8005b86 <_strtol_l.isra.0+0x22>
 8005b94:	2c2d      	cmp	r4, #45	@ 0x2d
 8005b96:	d110      	bne.n	8005bba <_strtol_l.isra.0+0x56>
 8005b98:	782c      	ldrb	r4, [r5, #0]
 8005b9a:	2601      	movs	r6, #1
 8005b9c:	1c95      	adds	r5, r2, #2
 8005b9e:	f033 0210 	bics.w	r2, r3, #16
 8005ba2:	d115      	bne.n	8005bd0 <_strtol_l.isra.0+0x6c>
 8005ba4:	2c30      	cmp	r4, #48	@ 0x30
 8005ba6:	d10d      	bne.n	8005bc4 <_strtol_l.isra.0+0x60>
 8005ba8:	782a      	ldrb	r2, [r5, #0]
 8005baa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005bae:	2a58      	cmp	r2, #88	@ 0x58
 8005bb0:	d108      	bne.n	8005bc4 <_strtol_l.isra.0+0x60>
 8005bb2:	786c      	ldrb	r4, [r5, #1]
 8005bb4:	3502      	adds	r5, #2
 8005bb6:	2310      	movs	r3, #16
 8005bb8:	e00a      	b.n	8005bd0 <_strtol_l.isra.0+0x6c>
 8005bba:	2c2b      	cmp	r4, #43	@ 0x2b
 8005bbc:	bf04      	itt	eq
 8005bbe:	782c      	ldrbeq	r4, [r5, #0]
 8005bc0:	1c95      	addeq	r5, r2, #2
 8005bc2:	e7ec      	b.n	8005b9e <_strtol_l.isra.0+0x3a>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f6      	bne.n	8005bb6 <_strtol_l.isra.0+0x52>
 8005bc8:	2c30      	cmp	r4, #48	@ 0x30
 8005bca:	bf14      	ite	ne
 8005bcc:	230a      	movne	r3, #10
 8005bce:	2308      	moveq	r3, #8
 8005bd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005bd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005bd8:	2200      	movs	r2, #0
 8005bda:	fbbc f9f3 	udiv	r9, ip, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005be4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005be8:	2f09      	cmp	r7, #9
 8005bea:	d80f      	bhi.n	8005c0c <_strtol_l.isra.0+0xa8>
 8005bec:	463c      	mov	r4, r7
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	dd1b      	ble.n	8005c2a <_strtol_l.isra.0+0xc6>
 8005bf2:	1c57      	adds	r7, r2, #1
 8005bf4:	d007      	beq.n	8005c06 <_strtol_l.isra.0+0xa2>
 8005bf6:	4581      	cmp	r9, r0
 8005bf8:	d314      	bcc.n	8005c24 <_strtol_l.isra.0+0xc0>
 8005bfa:	d101      	bne.n	8005c00 <_strtol_l.isra.0+0x9c>
 8005bfc:	45a2      	cmp	sl, r4
 8005bfe:	db11      	blt.n	8005c24 <_strtol_l.isra.0+0xc0>
 8005c00:	fb00 4003 	mla	r0, r0, r3, r4
 8005c04:	2201      	movs	r2, #1
 8005c06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c0a:	e7eb      	b.n	8005be4 <_strtol_l.isra.0+0x80>
 8005c0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005c10:	2f19      	cmp	r7, #25
 8005c12:	d801      	bhi.n	8005c18 <_strtol_l.isra.0+0xb4>
 8005c14:	3c37      	subs	r4, #55	@ 0x37
 8005c16:	e7ea      	b.n	8005bee <_strtol_l.isra.0+0x8a>
 8005c18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c1c:	2f19      	cmp	r7, #25
 8005c1e:	d804      	bhi.n	8005c2a <_strtol_l.isra.0+0xc6>
 8005c20:	3c57      	subs	r4, #87	@ 0x57
 8005c22:	e7e4      	b.n	8005bee <_strtol_l.isra.0+0x8a>
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295
 8005c28:	e7ed      	b.n	8005c06 <_strtol_l.isra.0+0xa2>
 8005c2a:	1c53      	adds	r3, r2, #1
 8005c2c:	d108      	bne.n	8005c40 <_strtol_l.isra.0+0xdc>
 8005c2e:	2322      	movs	r3, #34	@ 0x22
 8005c30:	f8ce 3000 	str.w	r3, [lr]
 8005c34:	4660      	mov	r0, ip
 8005c36:	f1b8 0f00 	cmp.w	r8, #0
 8005c3a:	d0a0      	beq.n	8005b7e <_strtol_l.isra.0+0x1a>
 8005c3c:	1e69      	subs	r1, r5, #1
 8005c3e:	e006      	b.n	8005c4e <_strtol_l.isra.0+0xea>
 8005c40:	b106      	cbz	r6, 8005c44 <_strtol_l.isra.0+0xe0>
 8005c42:	4240      	negs	r0, r0
 8005c44:	f1b8 0f00 	cmp.w	r8, #0
 8005c48:	d099      	beq.n	8005b7e <_strtol_l.isra.0+0x1a>
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	d1f6      	bne.n	8005c3c <_strtol_l.isra.0+0xd8>
 8005c4e:	f8c8 1000 	str.w	r1, [r8]
 8005c52:	e794      	b.n	8005b7e <_strtol_l.isra.0+0x1a>
 8005c54:	08006981 	.word	0x08006981

08005c58 <strtol>:
 8005c58:	4613      	mov	r3, r2
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	4802      	ldr	r0, [pc, #8]	@ (8005c68 <strtol+0x10>)
 8005c60:	6800      	ldr	r0, [r0, #0]
 8005c62:	f7ff bf7f 	b.w	8005b64 <_strtol_l.isra.0>
 8005c66:	bf00      	nop
 8005c68:	20000010 	.word	0x20000010

08005c6c <sniprintf>:
 8005c6c:	b40c      	push	{r2, r3}
 8005c6e:	b530      	push	{r4, r5, lr}
 8005c70:	4b18      	ldr	r3, [pc, #96]	@ (8005cd4 <sniprintf+0x68>)
 8005c72:	1e0c      	subs	r4, r1, #0
 8005c74:	681d      	ldr	r5, [r3, #0]
 8005c76:	b09d      	sub	sp, #116	@ 0x74
 8005c78:	da08      	bge.n	8005c8c <sniprintf+0x20>
 8005c7a:	238b      	movs	r3, #139	@ 0x8b
 8005c7c:	602b      	str	r3, [r5, #0]
 8005c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c82:	b01d      	add	sp, #116	@ 0x74
 8005c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c88:	b002      	add	sp, #8
 8005c8a:	4770      	bx	lr
 8005c8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005c9a:	bf14      	ite	ne
 8005c9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ca0:	4623      	moveq	r3, r4
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	9307      	str	r3, [sp, #28]
 8005ca6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005caa:	9002      	str	r0, [sp, #8]
 8005cac:	9006      	str	r0, [sp, #24]
 8005cae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005cb4:	ab21      	add	r3, sp, #132	@ 0x84
 8005cb6:	a902      	add	r1, sp, #8
 8005cb8:	4628      	mov	r0, r5
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	f000 f9a8 	bl	8006010 <_svfiprintf_r>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	bfbc      	itt	lt
 8005cc4:	238b      	movlt	r3, #139	@ 0x8b
 8005cc6:	602b      	strlt	r3, [r5, #0]
 8005cc8:	2c00      	cmp	r4, #0
 8005cca:	d0da      	beq.n	8005c82 <sniprintf+0x16>
 8005ccc:	9b02      	ldr	r3, [sp, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	e7d6      	b.n	8005c82 <sniprintf+0x16>
 8005cd4:	20000010 	.word	0x20000010

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <strncpy>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	3901      	subs	r1, #1
 8005cec:	4603      	mov	r3, r0
 8005cee:	b132      	cbz	r2, 8005cfe <strncpy+0x16>
 8005cf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005cf4:	f803 4b01 	strb.w	r4, [r3], #1
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	2c00      	cmp	r4, #0
 8005cfc:	d1f7      	bne.n	8005cee <strncpy+0x6>
 8005cfe:	441a      	add	r2, r3
 8005d00:	2100      	movs	r1, #0
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d100      	bne.n	8005d08 <strncpy+0x20>
 8005d06:	bd10      	pop	{r4, pc}
 8005d08:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0c:	e7f9      	b.n	8005d02 <strncpy+0x1a>
	...

08005d10 <__errno>:
 8005d10:	4b01      	ldr	r3, [pc, #4]	@ (8005d18 <__errno+0x8>)
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000010 	.word	0x20000010

08005d1c <__libc_init_array>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d54 <__libc_init_array+0x38>)
 8005d20:	4c0d      	ldr	r4, [pc, #52]	@ (8005d58 <__libc_init_array+0x3c>)
 8005d22:	1b64      	subs	r4, r4, r5
 8005d24:	10a4      	asrs	r4, r4, #2
 8005d26:	2600      	movs	r6, #0
 8005d28:	42a6      	cmp	r6, r4
 8005d2a:	d109      	bne.n	8005d40 <__libc_init_array+0x24>
 8005d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d5c <__libc_init_array+0x40>)
 8005d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d60 <__libc_init_array+0x44>)
 8005d30:	f000 fe04 	bl	800693c <_init>
 8005d34:	1b64      	subs	r4, r4, r5
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	2600      	movs	r6, #0
 8005d3a:	42a6      	cmp	r6, r4
 8005d3c:	d105      	bne.n	8005d4a <__libc_init_array+0x2e>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d44:	4798      	blx	r3
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7ee      	b.n	8005d28 <__libc_init_array+0xc>
 8005d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4e:	4798      	blx	r3
 8005d50:	3601      	adds	r6, #1
 8005d52:	e7f2      	b.n	8005d3a <__libc_init_array+0x1e>
 8005d54:	08006af4 	.word	0x08006af4
 8005d58:	08006af4 	.word	0x08006af4
 8005d5c:	08006af4 	.word	0x08006af4
 8005d60:	08006af8 	.word	0x08006af8

08005d64 <__retarget_lock_acquire_recursive>:
 8005d64:	4770      	bx	lr

08005d66 <__retarget_lock_release_recursive>:
 8005d66:	4770      	bx	lr

08005d68 <_free_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	d041      	beq.n	8005df4 <_free_r+0x8c>
 8005d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d74:	1f0c      	subs	r4, r1, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfb8      	it	lt
 8005d7a:	18e4      	addlt	r4, r4, r3
 8005d7c:	f000 f8e0 	bl	8005f40 <__malloc_lock>
 8005d80:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <_free_r+0x90>)
 8005d82:	6813      	ldr	r3, [r2, #0]
 8005d84:	b933      	cbnz	r3, 8005d94 <_free_r+0x2c>
 8005d86:	6063      	str	r3, [r4, #4]
 8005d88:	6014      	str	r4, [r2, #0]
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d90:	f000 b8dc 	b.w	8005f4c <__malloc_unlock>
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d908      	bls.n	8005daa <_free_r+0x42>
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	1821      	adds	r1, r4, r0
 8005d9c:	428b      	cmp	r3, r1
 8005d9e:	bf01      	itttt	eq
 8005da0:	6819      	ldreq	r1, [r3, #0]
 8005da2:	685b      	ldreq	r3, [r3, #4]
 8005da4:	1809      	addeq	r1, r1, r0
 8005da6:	6021      	streq	r1, [r4, #0]
 8005da8:	e7ed      	b.n	8005d86 <_free_r+0x1e>
 8005daa:	461a      	mov	r2, r3
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b10b      	cbz	r3, 8005db4 <_free_r+0x4c>
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d9fa      	bls.n	8005daa <_free_r+0x42>
 8005db4:	6811      	ldr	r1, [r2, #0]
 8005db6:	1850      	adds	r0, r2, r1
 8005db8:	42a0      	cmp	r0, r4
 8005dba:	d10b      	bne.n	8005dd4 <_free_r+0x6c>
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	4401      	add	r1, r0
 8005dc0:	1850      	adds	r0, r2, r1
 8005dc2:	4283      	cmp	r3, r0
 8005dc4:	6011      	str	r1, [r2, #0]
 8005dc6:	d1e0      	bne.n	8005d8a <_free_r+0x22>
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	6053      	str	r3, [r2, #4]
 8005dce:	4408      	add	r0, r1
 8005dd0:	6010      	str	r0, [r2, #0]
 8005dd2:	e7da      	b.n	8005d8a <_free_r+0x22>
 8005dd4:	d902      	bls.n	8005ddc <_free_r+0x74>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	602b      	str	r3, [r5, #0]
 8005dda:	e7d6      	b.n	8005d8a <_free_r+0x22>
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	1821      	adds	r1, r4, r0
 8005de0:	428b      	cmp	r3, r1
 8005de2:	bf04      	itt	eq
 8005de4:	6819      	ldreq	r1, [r3, #0]
 8005de6:	685b      	ldreq	r3, [r3, #4]
 8005de8:	6063      	str	r3, [r4, #4]
 8005dea:	bf04      	itt	eq
 8005dec:	1809      	addeq	r1, r1, r0
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	6054      	str	r4, [r2, #4]
 8005df2:	e7ca      	b.n	8005d8a <_free_r+0x22>
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	20000354 	.word	0x20000354

08005dfc <sbrk_aligned>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8005e3c <sbrk_aligned+0x40>)
 8005e00:	460c      	mov	r4, r1
 8005e02:	6831      	ldr	r1, [r6, #0]
 8005e04:	4605      	mov	r5, r0
 8005e06:	b911      	cbnz	r1, 8005e0e <sbrk_aligned+0x12>
 8005e08:	f000 fba4 	bl	8006554 <_sbrk_r>
 8005e0c:	6030      	str	r0, [r6, #0]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 fb9f 	bl	8006554 <_sbrk_r>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d103      	bne.n	8005e22 <sbrk_aligned+0x26>
 8005e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e1e:	4620      	mov	r0, r4
 8005e20:	bd70      	pop	{r4, r5, r6, pc}
 8005e22:	1cc4      	adds	r4, r0, #3
 8005e24:	f024 0403 	bic.w	r4, r4, #3
 8005e28:	42a0      	cmp	r0, r4
 8005e2a:	d0f8      	beq.n	8005e1e <sbrk_aligned+0x22>
 8005e2c:	1a21      	subs	r1, r4, r0
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 fb90 	bl	8006554 <_sbrk_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1f2      	bne.n	8005e1e <sbrk_aligned+0x22>
 8005e38:	e7ef      	b.n	8005e1a <sbrk_aligned+0x1e>
 8005e3a:	bf00      	nop
 8005e3c:	20000350 	.word	0x20000350

08005e40 <_malloc_r>:
 8005e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e44:	1ccd      	adds	r5, r1, #3
 8005e46:	f025 0503 	bic.w	r5, r5, #3
 8005e4a:	3508      	adds	r5, #8
 8005e4c:	2d0c      	cmp	r5, #12
 8005e4e:	bf38      	it	cc
 8005e50:	250c      	movcc	r5, #12
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	4606      	mov	r6, r0
 8005e56:	db01      	blt.n	8005e5c <_malloc_r+0x1c>
 8005e58:	42a9      	cmp	r1, r5
 8005e5a:	d904      	bls.n	8005e66 <_malloc_r+0x26>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	6033      	str	r3, [r6, #0]
 8005e60:	2000      	movs	r0, #0
 8005e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f3c <_malloc_r+0xfc>
 8005e6a:	f000 f869 	bl	8005f40 <__malloc_lock>
 8005e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e72:	461c      	mov	r4, r3
 8005e74:	bb44      	cbnz	r4, 8005ec8 <_malloc_r+0x88>
 8005e76:	4629      	mov	r1, r5
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff ffbf 	bl	8005dfc <sbrk_aligned>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	4604      	mov	r4, r0
 8005e82:	d158      	bne.n	8005f36 <_malloc_r+0xf6>
 8005e84:	f8d8 4000 	ldr.w	r4, [r8]
 8005e88:	4627      	mov	r7, r4
 8005e8a:	2f00      	cmp	r7, #0
 8005e8c:	d143      	bne.n	8005f16 <_malloc_r+0xd6>
 8005e8e:	2c00      	cmp	r4, #0
 8005e90:	d04b      	beq.n	8005f2a <_malloc_r+0xea>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	4639      	mov	r1, r7
 8005e96:	4630      	mov	r0, r6
 8005e98:	eb04 0903 	add.w	r9, r4, r3
 8005e9c:	f000 fb5a 	bl	8006554 <_sbrk_r>
 8005ea0:	4581      	cmp	r9, r0
 8005ea2:	d142      	bne.n	8005f2a <_malloc_r+0xea>
 8005ea4:	6821      	ldr	r1, [r4, #0]
 8005ea6:	1a6d      	subs	r5, r5, r1
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f7ff ffa6 	bl	8005dfc <sbrk_aligned>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d03a      	beq.n	8005f2a <_malloc_r+0xea>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	442b      	add	r3, r5
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	f8d8 3000 	ldr.w	r3, [r8]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	bb62      	cbnz	r2, 8005f1c <_malloc_r+0xdc>
 8005ec2:	f8c8 7000 	str.w	r7, [r8]
 8005ec6:	e00f      	b.n	8005ee8 <_malloc_r+0xa8>
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	1b52      	subs	r2, r2, r5
 8005ecc:	d420      	bmi.n	8005f10 <_malloc_r+0xd0>
 8005ece:	2a0b      	cmp	r2, #11
 8005ed0:	d917      	bls.n	8005f02 <_malloc_r+0xc2>
 8005ed2:	1961      	adds	r1, r4, r5
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	6025      	str	r5, [r4, #0]
 8005ed8:	bf18      	it	ne
 8005eda:	6059      	strne	r1, [r3, #4]
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	bf08      	it	eq
 8005ee0:	f8c8 1000 	streq.w	r1, [r8]
 8005ee4:	5162      	str	r2, [r4, r5]
 8005ee6:	604b      	str	r3, [r1, #4]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f82f 	bl	8005f4c <__malloc_unlock>
 8005eee:	f104 000b 	add.w	r0, r4, #11
 8005ef2:	1d23      	adds	r3, r4, #4
 8005ef4:	f020 0007 	bic.w	r0, r0, #7
 8005ef8:	1ac2      	subs	r2, r0, r3
 8005efa:	bf1c      	itt	ne
 8005efc:	1a1b      	subne	r3, r3, r0
 8005efe:	50a3      	strne	r3, [r4, r2]
 8005f00:	e7af      	b.n	8005e62 <_malloc_r+0x22>
 8005f02:	6862      	ldr	r2, [r4, #4]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	bf0c      	ite	eq
 8005f08:	f8c8 2000 	streq.w	r2, [r8]
 8005f0c:	605a      	strne	r2, [r3, #4]
 8005f0e:	e7eb      	b.n	8005ee8 <_malloc_r+0xa8>
 8005f10:	4623      	mov	r3, r4
 8005f12:	6864      	ldr	r4, [r4, #4]
 8005f14:	e7ae      	b.n	8005e74 <_malloc_r+0x34>
 8005f16:	463c      	mov	r4, r7
 8005f18:	687f      	ldr	r7, [r7, #4]
 8005f1a:	e7b6      	b.n	8005e8a <_malloc_r+0x4a>
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d1fb      	bne.n	8005f1c <_malloc_r+0xdc>
 8005f24:	2300      	movs	r3, #0
 8005f26:	6053      	str	r3, [r2, #4]
 8005f28:	e7de      	b.n	8005ee8 <_malloc_r+0xa8>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	6033      	str	r3, [r6, #0]
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 f80c 	bl	8005f4c <__malloc_unlock>
 8005f34:	e794      	b.n	8005e60 <_malloc_r+0x20>
 8005f36:	6005      	str	r5, [r0, #0]
 8005f38:	e7d6      	b.n	8005ee8 <_malloc_r+0xa8>
 8005f3a:	bf00      	nop
 8005f3c:	20000354 	.word	0x20000354

08005f40 <__malloc_lock>:
 8005f40:	4801      	ldr	r0, [pc, #4]	@ (8005f48 <__malloc_lock+0x8>)
 8005f42:	f7ff bf0f 	b.w	8005d64 <__retarget_lock_acquire_recursive>
 8005f46:	bf00      	nop
 8005f48:	2000034c 	.word	0x2000034c

08005f4c <__malloc_unlock>:
 8005f4c:	4801      	ldr	r0, [pc, #4]	@ (8005f54 <__malloc_unlock+0x8>)
 8005f4e:	f7ff bf0a 	b.w	8005d66 <__retarget_lock_release_recursive>
 8005f52:	bf00      	nop
 8005f54:	2000034c 	.word	0x2000034c

08005f58 <__ssputs_r>:
 8005f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	688e      	ldr	r6, [r1, #8]
 8005f5e:	461f      	mov	r7, r3
 8005f60:	42be      	cmp	r6, r7
 8005f62:	680b      	ldr	r3, [r1, #0]
 8005f64:	4682      	mov	sl, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4690      	mov	r8, r2
 8005f6a:	d82d      	bhi.n	8005fc8 <__ssputs_r+0x70>
 8005f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f74:	d026      	beq.n	8005fc4 <__ssputs_r+0x6c>
 8005f76:	6965      	ldr	r5, [r4, #20]
 8005f78:	6909      	ldr	r1, [r1, #16]
 8005f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f7e:	eba3 0901 	sub.w	r9, r3, r1
 8005f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f86:	1c7b      	adds	r3, r7, #1
 8005f88:	444b      	add	r3, r9
 8005f8a:	106d      	asrs	r5, r5, #1
 8005f8c:	429d      	cmp	r5, r3
 8005f8e:	bf38      	it	cc
 8005f90:	461d      	movcc	r5, r3
 8005f92:	0553      	lsls	r3, r2, #21
 8005f94:	d527      	bpl.n	8005fe6 <__ssputs_r+0x8e>
 8005f96:	4629      	mov	r1, r5
 8005f98:	f7ff ff52 	bl	8005e40 <_malloc_r>
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	b360      	cbz	r0, 8005ffa <__ssputs_r+0xa2>
 8005fa0:	6921      	ldr	r1, [r4, #16]
 8005fa2:	464a      	mov	r2, r9
 8005fa4:	f000 fae6 	bl	8006574 <memcpy>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	6126      	str	r6, [r4, #16]
 8005fb6:	6165      	str	r5, [r4, #20]
 8005fb8:	444e      	add	r6, r9
 8005fba:	eba5 0509 	sub.w	r5, r5, r9
 8005fbe:	6026      	str	r6, [r4, #0]
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	463e      	mov	r6, r7
 8005fc4:	42be      	cmp	r6, r7
 8005fc6:	d900      	bls.n	8005fca <__ssputs_r+0x72>
 8005fc8:	463e      	mov	r6, r7
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	4641      	mov	r1, r8
 8005fd0:	f000 faa6 	bl	8006520 <memmove>
 8005fd4:	68a3      	ldr	r3, [r4, #8]
 8005fd6:	1b9b      	subs	r3, r3, r6
 8005fd8:	60a3      	str	r3, [r4, #8]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	4433      	add	r3, r6
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	f000 fad2 	bl	8006590 <_realloc_r>
 8005fec:	4606      	mov	r6, r0
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1e0      	bne.n	8005fb4 <__ssputs_r+0x5c>
 8005ff2:	6921      	ldr	r1, [r4, #16]
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	f7ff feb7 	bl	8005d68 <_free_r>
 8005ffa:	230c      	movs	r3, #12
 8005ffc:	f8ca 3000 	str.w	r3, [sl]
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006006:	81a3      	strh	r3, [r4, #12]
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	e7e9      	b.n	8005fe2 <__ssputs_r+0x8a>
	...

08006010 <_svfiprintf_r>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	4698      	mov	r8, r3
 8006016:	898b      	ldrh	r3, [r1, #12]
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	b09d      	sub	sp, #116	@ 0x74
 800601c:	4607      	mov	r7, r0
 800601e:	460d      	mov	r5, r1
 8006020:	4614      	mov	r4, r2
 8006022:	d510      	bpl.n	8006046 <_svfiprintf_r+0x36>
 8006024:	690b      	ldr	r3, [r1, #16]
 8006026:	b973      	cbnz	r3, 8006046 <_svfiprintf_r+0x36>
 8006028:	2140      	movs	r1, #64	@ 0x40
 800602a:	f7ff ff09 	bl	8005e40 <_malloc_r>
 800602e:	6028      	str	r0, [r5, #0]
 8006030:	6128      	str	r0, [r5, #16]
 8006032:	b930      	cbnz	r0, 8006042 <_svfiprintf_r+0x32>
 8006034:	230c      	movs	r3, #12
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	b01d      	add	sp, #116	@ 0x74
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	2340      	movs	r3, #64	@ 0x40
 8006044:	616b      	str	r3, [r5, #20]
 8006046:	2300      	movs	r3, #0
 8006048:	9309      	str	r3, [sp, #36]	@ 0x24
 800604a:	2320      	movs	r3, #32
 800604c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006050:	f8cd 800c 	str.w	r8, [sp, #12]
 8006054:	2330      	movs	r3, #48	@ 0x30
 8006056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061f4 <_svfiprintf_r+0x1e4>
 800605a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800605e:	f04f 0901 	mov.w	r9, #1
 8006062:	4623      	mov	r3, r4
 8006064:	469a      	mov	sl, r3
 8006066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800606a:	b10a      	cbz	r2, 8006070 <_svfiprintf_r+0x60>
 800606c:	2a25      	cmp	r2, #37	@ 0x25
 800606e:	d1f9      	bne.n	8006064 <_svfiprintf_r+0x54>
 8006070:	ebba 0b04 	subs.w	fp, sl, r4
 8006074:	d00b      	beq.n	800608e <_svfiprintf_r+0x7e>
 8006076:	465b      	mov	r3, fp
 8006078:	4622      	mov	r2, r4
 800607a:	4629      	mov	r1, r5
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff ff6b 	bl	8005f58 <__ssputs_r>
 8006082:	3001      	adds	r0, #1
 8006084:	f000 80a7 	beq.w	80061d6 <_svfiprintf_r+0x1c6>
 8006088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800608a:	445a      	add	r2, fp
 800608c:	9209      	str	r2, [sp, #36]	@ 0x24
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 809f 	beq.w	80061d6 <_svfiprintf_r+0x1c6>
 8006098:	2300      	movs	r3, #0
 800609a:	f04f 32ff 	mov.w	r2, #4294967295
 800609e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a2:	f10a 0a01 	add.w	sl, sl, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	9307      	str	r3, [sp, #28]
 80060aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80060b0:	4654      	mov	r4, sl
 80060b2:	2205      	movs	r2, #5
 80060b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b8:	484e      	ldr	r0, [pc, #312]	@ (80061f4 <_svfiprintf_r+0x1e4>)
 80060ba:	f7fa f8b1 	bl	8000220 <memchr>
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	b9d8      	cbnz	r0, 80060fa <_svfiprintf_r+0xea>
 80060c2:	06d0      	lsls	r0, r2, #27
 80060c4:	bf44      	itt	mi
 80060c6:	2320      	movmi	r3, #32
 80060c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060cc:	0711      	lsls	r1, r2, #28
 80060ce:	bf44      	itt	mi
 80060d0:	232b      	movmi	r3, #43	@ 0x2b
 80060d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b2a      	cmp	r3, #42	@ 0x2a
 80060dc:	d015      	beq.n	800610a <_svfiprintf_r+0xfa>
 80060de:	9a07      	ldr	r2, [sp, #28]
 80060e0:	4654      	mov	r4, sl
 80060e2:	2000      	movs	r0, #0
 80060e4:	f04f 0c0a 	mov.w	ip, #10
 80060e8:	4621      	mov	r1, r4
 80060ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ee:	3b30      	subs	r3, #48	@ 0x30
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d94b      	bls.n	800618c <_svfiprintf_r+0x17c>
 80060f4:	b1b0      	cbz	r0, 8006124 <_svfiprintf_r+0x114>
 80060f6:	9207      	str	r2, [sp, #28]
 80060f8:	e014      	b.n	8006124 <_svfiprintf_r+0x114>
 80060fa:	eba0 0308 	sub.w	r3, r0, r8
 80060fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006102:	4313      	orrs	r3, r2
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	46a2      	mov	sl, r4
 8006108:	e7d2      	b.n	80060b0 <_svfiprintf_r+0xa0>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	9103      	str	r1, [sp, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfbb      	ittet	lt
 8006116:	425b      	neglt	r3, r3
 8006118:	f042 0202 	orrlt.w	r2, r2, #2
 800611c:	9307      	strge	r3, [sp, #28]
 800611e:	9307      	strlt	r3, [sp, #28]
 8006120:	bfb8      	it	lt
 8006122:	9204      	strlt	r2, [sp, #16]
 8006124:	7823      	ldrb	r3, [r4, #0]
 8006126:	2b2e      	cmp	r3, #46	@ 0x2e
 8006128:	d10a      	bne.n	8006140 <_svfiprintf_r+0x130>
 800612a:	7863      	ldrb	r3, [r4, #1]
 800612c:	2b2a      	cmp	r3, #42	@ 0x2a
 800612e:	d132      	bne.n	8006196 <_svfiprintf_r+0x186>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1d1a      	adds	r2, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9203      	str	r2, [sp, #12]
 8006138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800613c:	3402      	adds	r4, #2
 800613e:	9305      	str	r3, [sp, #20]
 8006140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006204 <_svfiprintf_r+0x1f4>
 8006144:	7821      	ldrb	r1, [r4, #0]
 8006146:	2203      	movs	r2, #3
 8006148:	4650      	mov	r0, sl
 800614a:	f7fa f869 	bl	8000220 <memchr>
 800614e:	b138      	cbz	r0, 8006160 <_svfiprintf_r+0x150>
 8006150:	9b04      	ldr	r3, [sp, #16]
 8006152:	eba0 000a 	sub.w	r0, r0, sl
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	4082      	lsls	r2, r0
 800615a:	4313      	orrs	r3, r2
 800615c:	3401      	adds	r4, #1
 800615e:	9304      	str	r3, [sp, #16]
 8006160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006164:	4824      	ldr	r0, [pc, #144]	@ (80061f8 <_svfiprintf_r+0x1e8>)
 8006166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800616a:	2206      	movs	r2, #6
 800616c:	f7fa f858 	bl	8000220 <memchr>
 8006170:	2800      	cmp	r0, #0
 8006172:	d036      	beq.n	80061e2 <_svfiprintf_r+0x1d2>
 8006174:	4b21      	ldr	r3, [pc, #132]	@ (80061fc <_svfiprintf_r+0x1ec>)
 8006176:	bb1b      	cbnz	r3, 80061c0 <_svfiprintf_r+0x1b0>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	3307      	adds	r3, #7
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	3308      	adds	r3, #8
 8006182:	9303      	str	r3, [sp, #12]
 8006184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006186:	4433      	add	r3, r6
 8006188:	9309      	str	r3, [sp, #36]	@ 0x24
 800618a:	e76a      	b.n	8006062 <_svfiprintf_r+0x52>
 800618c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006190:	460c      	mov	r4, r1
 8006192:	2001      	movs	r0, #1
 8006194:	e7a8      	b.n	80060e8 <_svfiprintf_r+0xd8>
 8006196:	2300      	movs	r3, #0
 8006198:	3401      	adds	r4, #1
 800619a:	9305      	str	r3, [sp, #20]
 800619c:	4619      	mov	r1, r3
 800619e:	f04f 0c0a 	mov.w	ip, #10
 80061a2:	4620      	mov	r0, r4
 80061a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061a8:	3a30      	subs	r2, #48	@ 0x30
 80061aa:	2a09      	cmp	r2, #9
 80061ac:	d903      	bls.n	80061b6 <_svfiprintf_r+0x1a6>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0c6      	beq.n	8006140 <_svfiprintf_r+0x130>
 80061b2:	9105      	str	r1, [sp, #20]
 80061b4:	e7c4      	b.n	8006140 <_svfiprintf_r+0x130>
 80061b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ba:	4604      	mov	r4, r0
 80061bc:	2301      	movs	r3, #1
 80061be:	e7f0      	b.n	80061a2 <_svfiprintf_r+0x192>
 80061c0:	ab03      	add	r3, sp, #12
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	462a      	mov	r2, r5
 80061c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006200 <_svfiprintf_r+0x1f0>)
 80061c8:	a904      	add	r1, sp, #16
 80061ca:	4638      	mov	r0, r7
 80061cc:	f3af 8000 	nop.w
 80061d0:	1c42      	adds	r2, r0, #1
 80061d2:	4606      	mov	r6, r0
 80061d4:	d1d6      	bne.n	8006184 <_svfiprintf_r+0x174>
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	065b      	lsls	r3, r3, #25
 80061da:	f53f af2d 	bmi.w	8006038 <_svfiprintf_r+0x28>
 80061de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e0:	e72c      	b.n	800603c <_svfiprintf_r+0x2c>
 80061e2:	ab03      	add	r3, sp, #12
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	462a      	mov	r2, r5
 80061e8:	4b05      	ldr	r3, [pc, #20]	@ (8006200 <_svfiprintf_r+0x1f0>)
 80061ea:	a904      	add	r1, sp, #16
 80061ec:	4638      	mov	r0, r7
 80061ee:	f000 f879 	bl	80062e4 <_printf_i>
 80061f2:	e7ed      	b.n	80061d0 <_svfiprintf_r+0x1c0>
 80061f4:	08006a81 	.word	0x08006a81
 80061f8:	08006a8b 	.word	0x08006a8b
 80061fc:	00000000 	.word	0x00000000
 8006200:	08005f59 	.word	0x08005f59
 8006204:	08006a87 	.word	0x08006a87

08006208 <_printf_common>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	4616      	mov	r6, r2
 800620e:	4698      	mov	r8, r3
 8006210:	688a      	ldr	r2, [r1, #8]
 8006212:	690b      	ldr	r3, [r1, #16]
 8006214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006218:	4293      	cmp	r3, r2
 800621a:	bfb8      	it	lt
 800621c:	4613      	movlt	r3, r2
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006224:	4607      	mov	r7, r0
 8006226:	460c      	mov	r4, r1
 8006228:	b10a      	cbz	r2, 800622e <_printf_common+0x26>
 800622a:	3301      	adds	r3, #1
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	0699      	lsls	r1, r3, #26
 8006232:	bf42      	ittt	mi
 8006234:	6833      	ldrmi	r3, [r6, #0]
 8006236:	3302      	addmi	r3, #2
 8006238:	6033      	strmi	r3, [r6, #0]
 800623a:	6825      	ldr	r5, [r4, #0]
 800623c:	f015 0506 	ands.w	r5, r5, #6
 8006240:	d106      	bne.n	8006250 <_printf_common+0x48>
 8006242:	f104 0a19 	add.w	sl, r4, #25
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	6832      	ldr	r2, [r6, #0]
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	42ab      	cmp	r3, r5
 800624e:	dc26      	bgt.n	800629e <_printf_common+0x96>
 8006250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006254:	6822      	ldr	r2, [r4, #0]
 8006256:	3b00      	subs	r3, #0
 8006258:	bf18      	it	ne
 800625a:	2301      	movne	r3, #1
 800625c:	0692      	lsls	r2, r2, #26
 800625e:	d42b      	bmi.n	80062b8 <_printf_common+0xb0>
 8006260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006264:	4641      	mov	r1, r8
 8006266:	4638      	mov	r0, r7
 8006268:	47c8      	blx	r9
 800626a:	3001      	adds	r0, #1
 800626c:	d01e      	beq.n	80062ac <_printf_common+0xa4>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	f003 0306 	and.w	r3, r3, #6
 8006276:	2b04      	cmp	r3, #4
 8006278:	bf02      	ittt	eq
 800627a:	68e5      	ldreq	r5, [r4, #12]
 800627c:	6833      	ldreq	r3, [r6, #0]
 800627e:	1aed      	subeq	r5, r5, r3
 8006280:	68a3      	ldr	r3, [r4, #8]
 8006282:	bf0c      	ite	eq
 8006284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006288:	2500      	movne	r5, #0
 800628a:	4293      	cmp	r3, r2
 800628c:	bfc4      	itt	gt
 800628e:	1a9b      	subgt	r3, r3, r2
 8006290:	18ed      	addgt	r5, r5, r3
 8006292:	2600      	movs	r6, #0
 8006294:	341a      	adds	r4, #26
 8006296:	42b5      	cmp	r5, r6
 8006298:	d11a      	bne.n	80062d0 <_printf_common+0xc8>
 800629a:	2000      	movs	r0, #0
 800629c:	e008      	b.n	80062b0 <_printf_common+0xa8>
 800629e:	2301      	movs	r3, #1
 80062a0:	4652      	mov	r2, sl
 80062a2:	4641      	mov	r1, r8
 80062a4:	4638      	mov	r0, r7
 80062a6:	47c8      	blx	r9
 80062a8:	3001      	adds	r0, #1
 80062aa:	d103      	bne.n	80062b4 <_printf_common+0xac>
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b4:	3501      	adds	r5, #1
 80062b6:	e7c6      	b.n	8006246 <_printf_common+0x3e>
 80062b8:	18e1      	adds	r1, r4, r3
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	2030      	movs	r0, #48	@ 0x30
 80062be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062c2:	4422      	add	r2, r4
 80062c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062cc:	3302      	adds	r3, #2
 80062ce:	e7c7      	b.n	8006260 <_printf_common+0x58>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4622      	mov	r2, r4
 80062d4:	4641      	mov	r1, r8
 80062d6:	4638      	mov	r0, r7
 80062d8:	47c8      	blx	r9
 80062da:	3001      	adds	r0, #1
 80062dc:	d0e6      	beq.n	80062ac <_printf_common+0xa4>
 80062de:	3601      	adds	r6, #1
 80062e0:	e7d9      	b.n	8006296 <_printf_common+0x8e>
	...

080062e4 <_printf_i>:
 80062e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e8:	7e0f      	ldrb	r7, [r1, #24]
 80062ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062ec:	2f78      	cmp	r7, #120	@ 0x78
 80062ee:	4691      	mov	r9, r2
 80062f0:	4680      	mov	r8, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	469a      	mov	sl, r3
 80062f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062fa:	d807      	bhi.n	800630c <_printf_i+0x28>
 80062fc:	2f62      	cmp	r7, #98	@ 0x62
 80062fe:	d80a      	bhi.n	8006316 <_printf_i+0x32>
 8006300:	2f00      	cmp	r7, #0
 8006302:	f000 80d1 	beq.w	80064a8 <_printf_i+0x1c4>
 8006306:	2f58      	cmp	r7, #88	@ 0x58
 8006308:	f000 80b8 	beq.w	800647c <_printf_i+0x198>
 800630c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006314:	e03a      	b.n	800638c <_printf_i+0xa8>
 8006316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800631a:	2b15      	cmp	r3, #21
 800631c:	d8f6      	bhi.n	800630c <_printf_i+0x28>
 800631e:	a101      	add	r1, pc, #4	@ (adr r1, 8006324 <_printf_i+0x40>)
 8006320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006324:	0800637d 	.word	0x0800637d
 8006328:	08006391 	.word	0x08006391
 800632c:	0800630d 	.word	0x0800630d
 8006330:	0800630d 	.word	0x0800630d
 8006334:	0800630d 	.word	0x0800630d
 8006338:	0800630d 	.word	0x0800630d
 800633c:	08006391 	.word	0x08006391
 8006340:	0800630d 	.word	0x0800630d
 8006344:	0800630d 	.word	0x0800630d
 8006348:	0800630d 	.word	0x0800630d
 800634c:	0800630d 	.word	0x0800630d
 8006350:	0800648f 	.word	0x0800648f
 8006354:	080063bb 	.word	0x080063bb
 8006358:	08006449 	.word	0x08006449
 800635c:	0800630d 	.word	0x0800630d
 8006360:	0800630d 	.word	0x0800630d
 8006364:	080064b1 	.word	0x080064b1
 8006368:	0800630d 	.word	0x0800630d
 800636c:	080063bb 	.word	0x080063bb
 8006370:	0800630d 	.word	0x0800630d
 8006374:	0800630d 	.word	0x0800630d
 8006378:	08006451 	.word	0x08006451
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	1d1a      	adds	r2, r3, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6032      	str	r2, [r6, #0]
 8006384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800638c:	2301      	movs	r3, #1
 800638e:	e09c      	b.n	80064ca <_printf_i+0x1e6>
 8006390:	6833      	ldr	r3, [r6, #0]
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	1d19      	adds	r1, r3, #4
 8006396:	6031      	str	r1, [r6, #0]
 8006398:	0606      	lsls	r6, r0, #24
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0xbc>
 800639c:	681d      	ldr	r5, [r3, #0]
 800639e:	e003      	b.n	80063a8 <_printf_i+0xc4>
 80063a0:	0645      	lsls	r5, r0, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0xb8>
 80063a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	da03      	bge.n	80063b4 <_printf_i+0xd0>
 80063ac:	232d      	movs	r3, #45	@ 0x2d
 80063ae:	426d      	negs	r5, r5
 80063b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063b4:	4858      	ldr	r0, [pc, #352]	@ (8006518 <_printf_i+0x234>)
 80063b6:	230a      	movs	r3, #10
 80063b8:	e011      	b.n	80063de <_printf_i+0xfa>
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	0608      	lsls	r0, r1, #24
 80063c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063c4:	d402      	bmi.n	80063cc <_printf_i+0xe8>
 80063c6:	0649      	lsls	r1, r1, #25
 80063c8:	bf48      	it	mi
 80063ca:	b2ad      	uxthmi	r5, r5
 80063cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063ce:	4852      	ldr	r0, [pc, #328]	@ (8006518 <_printf_i+0x234>)
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	bf14      	ite	ne
 80063d4:	230a      	movne	r3, #10
 80063d6:	2308      	moveq	r3, #8
 80063d8:	2100      	movs	r1, #0
 80063da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063de:	6866      	ldr	r6, [r4, #4]
 80063e0:	60a6      	str	r6, [r4, #8]
 80063e2:	2e00      	cmp	r6, #0
 80063e4:	db05      	blt.n	80063f2 <_printf_i+0x10e>
 80063e6:	6821      	ldr	r1, [r4, #0]
 80063e8:	432e      	orrs	r6, r5
 80063ea:	f021 0104 	bic.w	r1, r1, #4
 80063ee:	6021      	str	r1, [r4, #0]
 80063f0:	d04b      	beq.n	800648a <_printf_i+0x1a6>
 80063f2:	4616      	mov	r6, r2
 80063f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80063f8:	fb03 5711 	mls	r7, r3, r1, r5
 80063fc:	5dc7      	ldrb	r7, [r0, r7]
 80063fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006402:	462f      	mov	r7, r5
 8006404:	42bb      	cmp	r3, r7
 8006406:	460d      	mov	r5, r1
 8006408:	d9f4      	bls.n	80063f4 <_printf_i+0x110>
 800640a:	2b08      	cmp	r3, #8
 800640c:	d10b      	bne.n	8006426 <_printf_i+0x142>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	07df      	lsls	r7, r3, #31
 8006412:	d508      	bpl.n	8006426 <_printf_i+0x142>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	6861      	ldr	r1, [r4, #4]
 8006418:	4299      	cmp	r1, r3
 800641a:	bfde      	ittt	le
 800641c:	2330      	movle	r3, #48	@ 0x30
 800641e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006422:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006426:	1b92      	subs	r2, r2, r6
 8006428:	6122      	str	r2, [r4, #16]
 800642a:	f8cd a000 	str.w	sl, [sp]
 800642e:	464b      	mov	r3, r9
 8006430:	aa03      	add	r2, sp, #12
 8006432:	4621      	mov	r1, r4
 8006434:	4640      	mov	r0, r8
 8006436:	f7ff fee7 	bl	8006208 <_printf_common>
 800643a:	3001      	adds	r0, #1
 800643c:	d14a      	bne.n	80064d4 <_printf_i+0x1f0>
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	b004      	add	sp, #16
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	f043 0320 	orr.w	r3, r3, #32
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	4832      	ldr	r0, [pc, #200]	@ (800651c <_printf_i+0x238>)
 8006452:	2778      	movs	r7, #120	@ 0x78
 8006454:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	6831      	ldr	r1, [r6, #0]
 800645c:	061f      	lsls	r7, r3, #24
 800645e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006462:	d402      	bmi.n	800646a <_printf_i+0x186>
 8006464:	065f      	lsls	r7, r3, #25
 8006466:	bf48      	it	mi
 8006468:	b2ad      	uxthmi	r5, r5
 800646a:	6031      	str	r1, [r6, #0]
 800646c:	07d9      	lsls	r1, r3, #31
 800646e:	bf44      	itt	mi
 8006470:	f043 0320 	orrmi.w	r3, r3, #32
 8006474:	6023      	strmi	r3, [r4, #0]
 8006476:	b11d      	cbz	r5, 8006480 <_printf_i+0x19c>
 8006478:	2310      	movs	r3, #16
 800647a:	e7ad      	b.n	80063d8 <_printf_i+0xf4>
 800647c:	4826      	ldr	r0, [pc, #152]	@ (8006518 <_printf_i+0x234>)
 800647e:	e7e9      	b.n	8006454 <_printf_i+0x170>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	f023 0320 	bic.w	r3, r3, #32
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	e7f6      	b.n	8006478 <_printf_i+0x194>
 800648a:	4616      	mov	r6, r2
 800648c:	e7bd      	b.n	800640a <_printf_i+0x126>
 800648e:	6833      	ldr	r3, [r6, #0]
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	6961      	ldr	r1, [r4, #20]
 8006494:	1d18      	adds	r0, r3, #4
 8006496:	6030      	str	r0, [r6, #0]
 8006498:	062e      	lsls	r6, r5, #24
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	d501      	bpl.n	80064a2 <_printf_i+0x1be>
 800649e:	6019      	str	r1, [r3, #0]
 80064a0:	e002      	b.n	80064a8 <_printf_i+0x1c4>
 80064a2:	0668      	lsls	r0, r5, #25
 80064a4:	d5fb      	bpl.n	800649e <_printf_i+0x1ba>
 80064a6:	8019      	strh	r1, [r3, #0]
 80064a8:	2300      	movs	r3, #0
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	4616      	mov	r6, r2
 80064ae:	e7bc      	b.n	800642a <_printf_i+0x146>
 80064b0:	6833      	ldr	r3, [r6, #0]
 80064b2:	1d1a      	adds	r2, r3, #4
 80064b4:	6032      	str	r2, [r6, #0]
 80064b6:	681e      	ldr	r6, [r3, #0]
 80064b8:	6862      	ldr	r2, [r4, #4]
 80064ba:	2100      	movs	r1, #0
 80064bc:	4630      	mov	r0, r6
 80064be:	f7f9 feaf 	bl	8000220 <memchr>
 80064c2:	b108      	cbz	r0, 80064c8 <_printf_i+0x1e4>
 80064c4:	1b80      	subs	r0, r0, r6
 80064c6:	6060      	str	r0, [r4, #4]
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	2300      	movs	r3, #0
 80064ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064d2:	e7aa      	b.n	800642a <_printf_i+0x146>
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	4632      	mov	r2, r6
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	47d0      	blx	sl
 80064de:	3001      	adds	r0, #1
 80064e0:	d0ad      	beq.n	800643e <_printf_i+0x15a>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	079b      	lsls	r3, r3, #30
 80064e6:	d413      	bmi.n	8006510 <_printf_i+0x22c>
 80064e8:	68e0      	ldr	r0, [r4, #12]
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	4298      	cmp	r0, r3
 80064ee:	bfb8      	it	lt
 80064f0:	4618      	movlt	r0, r3
 80064f2:	e7a6      	b.n	8006442 <_printf_i+0x15e>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4632      	mov	r2, r6
 80064f8:	4649      	mov	r1, r9
 80064fa:	4640      	mov	r0, r8
 80064fc:	47d0      	blx	sl
 80064fe:	3001      	adds	r0, #1
 8006500:	d09d      	beq.n	800643e <_printf_i+0x15a>
 8006502:	3501      	adds	r5, #1
 8006504:	68e3      	ldr	r3, [r4, #12]
 8006506:	9903      	ldr	r1, [sp, #12]
 8006508:	1a5b      	subs	r3, r3, r1
 800650a:	42ab      	cmp	r3, r5
 800650c:	dcf2      	bgt.n	80064f4 <_printf_i+0x210>
 800650e:	e7eb      	b.n	80064e8 <_printf_i+0x204>
 8006510:	2500      	movs	r5, #0
 8006512:	f104 0619 	add.w	r6, r4, #25
 8006516:	e7f5      	b.n	8006504 <_printf_i+0x220>
 8006518:	08006a92 	.word	0x08006a92
 800651c:	08006aa3 	.word	0x08006aa3

08006520 <memmove>:
 8006520:	4288      	cmp	r0, r1
 8006522:	b510      	push	{r4, lr}
 8006524:	eb01 0402 	add.w	r4, r1, r2
 8006528:	d902      	bls.n	8006530 <memmove+0x10>
 800652a:	4284      	cmp	r4, r0
 800652c:	4623      	mov	r3, r4
 800652e:	d807      	bhi.n	8006540 <memmove+0x20>
 8006530:	1e43      	subs	r3, r0, #1
 8006532:	42a1      	cmp	r1, r4
 8006534:	d008      	beq.n	8006548 <memmove+0x28>
 8006536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800653a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800653e:	e7f8      	b.n	8006532 <memmove+0x12>
 8006540:	4402      	add	r2, r0
 8006542:	4601      	mov	r1, r0
 8006544:	428a      	cmp	r2, r1
 8006546:	d100      	bne.n	800654a <memmove+0x2a>
 8006548:	bd10      	pop	{r4, pc}
 800654a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800654e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006552:	e7f7      	b.n	8006544 <memmove+0x24>

08006554 <_sbrk_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d06      	ldr	r5, [pc, #24]	@ (8006570 <_sbrk_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fb fb58 	bl	8001c14 <_sbrk>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_sbrk_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_sbrk_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000348 	.word	0x20000348

08006574 <memcpy>:
 8006574:	440a      	add	r2, r1
 8006576:	4291      	cmp	r1, r2
 8006578:	f100 33ff 	add.w	r3, r0, #4294967295
 800657c:	d100      	bne.n	8006580 <memcpy+0xc>
 800657e:	4770      	bx	lr
 8006580:	b510      	push	{r4, lr}
 8006582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800658a:	4291      	cmp	r1, r2
 800658c:	d1f9      	bne.n	8006582 <memcpy+0xe>
 800658e:	bd10      	pop	{r4, pc}

08006590 <_realloc_r>:
 8006590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	4607      	mov	r7, r0
 8006596:	4614      	mov	r4, r2
 8006598:	460d      	mov	r5, r1
 800659a:	b921      	cbnz	r1, 80065a6 <_realloc_r+0x16>
 800659c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a0:	4611      	mov	r1, r2
 80065a2:	f7ff bc4d 	b.w	8005e40 <_malloc_r>
 80065a6:	b92a      	cbnz	r2, 80065b4 <_realloc_r+0x24>
 80065a8:	f7ff fbde 	bl	8005d68 <_free_r>
 80065ac:	4625      	mov	r5, r4
 80065ae:	4628      	mov	r0, r5
 80065b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b4:	f000 f81a 	bl	80065ec <_malloc_usable_size_r>
 80065b8:	4284      	cmp	r4, r0
 80065ba:	4606      	mov	r6, r0
 80065bc:	d802      	bhi.n	80065c4 <_realloc_r+0x34>
 80065be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065c2:	d8f4      	bhi.n	80065ae <_realloc_r+0x1e>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4638      	mov	r0, r7
 80065c8:	f7ff fc3a 	bl	8005e40 <_malloc_r>
 80065cc:	4680      	mov	r8, r0
 80065ce:	b908      	cbnz	r0, 80065d4 <_realloc_r+0x44>
 80065d0:	4645      	mov	r5, r8
 80065d2:	e7ec      	b.n	80065ae <_realloc_r+0x1e>
 80065d4:	42b4      	cmp	r4, r6
 80065d6:	4622      	mov	r2, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	bf28      	it	cs
 80065dc:	4632      	movcs	r2, r6
 80065de:	f7ff ffc9 	bl	8006574 <memcpy>
 80065e2:	4629      	mov	r1, r5
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff fbbf 	bl	8005d68 <_free_r>
 80065ea:	e7f1      	b.n	80065d0 <_realloc_r+0x40>

080065ec <_malloc_usable_size_r>:
 80065ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f0:	1f18      	subs	r0, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfbc      	itt	lt
 80065f6:	580b      	ldrlt	r3, [r1, r0]
 80065f8:	18c0      	addlt	r0, r0, r3
 80065fa:	4770      	bx	lr

080065fc <atan2f>:
 80065fc:	f000 b822 	b.w	8006644 <__ieee754_atan2f>

08006600 <sqrtf>:
 8006600:	b508      	push	{r3, lr}
 8006602:	ed2d 8b02 	vpush	{d8}
 8006606:	eeb0 8a40 	vmov.f32	s16, s0
 800660a:	f000 f817 	bl	800663c <__ieee754_sqrtf>
 800660e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006616:	d60c      	bvs.n	8006632 <sqrtf+0x32>
 8006618:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006638 <sqrtf+0x38>
 800661c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006624:	d505      	bpl.n	8006632 <sqrtf+0x32>
 8006626:	f7ff fb73 	bl	8005d10 <__errno>
 800662a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800662e:	2321      	movs	r3, #33	@ 0x21
 8006630:	6003      	str	r3, [r0, #0]
 8006632:	ecbd 8b02 	vpop	{d8}
 8006636:	bd08      	pop	{r3, pc}
 8006638:	00000000 	.word	0x00000000

0800663c <__ieee754_sqrtf>:
 800663c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006640:	4770      	bx	lr
	...

08006644 <__ieee754_atan2f>:
 8006644:	ee10 2a90 	vmov	r2, s1
 8006648:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800664c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006650:	b510      	push	{r4, lr}
 8006652:	eef0 7a40 	vmov.f32	s15, s0
 8006656:	d806      	bhi.n	8006666 <__ieee754_atan2f+0x22>
 8006658:	ee10 0a10 	vmov	r0, s0
 800665c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006660:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006664:	d904      	bls.n	8006670 <__ieee754_atan2f+0x2c>
 8006666:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800666a:	eeb0 0a67 	vmov.f32	s0, s15
 800666e:	bd10      	pop	{r4, pc}
 8006670:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8006674:	d103      	bne.n	800667e <__ieee754_atan2f+0x3a>
 8006676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667a:	f000 b883 	b.w	8006784 <atanf>
 800667e:	1794      	asrs	r4, r2, #30
 8006680:	f004 0402 	and.w	r4, r4, #2
 8006684:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006688:	b943      	cbnz	r3, 800669c <__ieee754_atan2f+0x58>
 800668a:	2c02      	cmp	r4, #2
 800668c:	d05e      	beq.n	800674c <__ieee754_atan2f+0x108>
 800668e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006760 <__ieee754_atan2f+0x11c>
 8006692:	2c03      	cmp	r4, #3
 8006694:	bf08      	it	eq
 8006696:	eef0 7a47 	vmoveq.f32	s15, s14
 800669a:	e7e6      	b.n	800666a <__ieee754_atan2f+0x26>
 800669c:	b941      	cbnz	r1, 80066b0 <__ieee754_atan2f+0x6c>
 800669e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8006764 <__ieee754_atan2f+0x120>
 80066a2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006768 <__ieee754_atan2f+0x124>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	bfa8      	it	ge
 80066aa:	eef0 7a47 	vmovge.f32	s15, s14
 80066ae:	e7dc      	b.n	800666a <__ieee754_atan2f+0x26>
 80066b0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80066b4:	d110      	bne.n	80066d8 <__ieee754_atan2f+0x94>
 80066b6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80066ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80066be:	d107      	bne.n	80066d0 <__ieee754_atan2f+0x8c>
 80066c0:	2c02      	cmp	r4, #2
 80066c2:	d846      	bhi.n	8006752 <__ieee754_atan2f+0x10e>
 80066c4:	4b29      	ldr	r3, [pc, #164]	@ (800676c <__ieee754_atan2f+0x128>)
 80066c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80066ca:	edd3 7a00 	vldr	s15, [r3]
 80066ce:	e7cc      	b.n	800666a <__ieee754_atan2f+0x26>
 80066d0:	2c02      	cmp	r4, #2
 80066d2:	d841      	bhi.n	8006758 <__ieee754_atan2f+0x114>
 80066d4:	4b26      	ldr	r3, [pc, #152]	@ (8006770 <__ieee754_atan2f+0x12c>)
 80066d6:	e7f6      	b.n	80066c6 <__ieee754_atan2f+0x82>
 80066d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80066dc:	d0df      	beq.n	800669e <__ieee754_atan2f+0x5a>
 80066de:	1a5b      	subs	r3, r3, r1
 80066e0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80066e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80066e8:	da1a      	bge.n	8006720 <__ieee754_atan2f+0xdc>
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	da01      	bge.n	80066f2 <__ieee754_atan2f+0xae>
 80066ee:	313c      	adds	r1, #60	@ 0x3c
 80066f0:	db19      	blt.n	8006726 <__ieee754_atan2f+0xe2>
 80066f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80066f6:	f000 f919 	bl	800692c <fabsf>
 80066fa:	f000 f843 	bl	8006784 <atanf>
 80066fe:	eef0 7a40 	vmov.f32	s15, s0
 8006702:	2c01      	cmp	r4, #1
 8006704:	d012      	beq.n	800672c <__ieee754_atan2f+0xe8>
 8006706:	2c02      	cmp	r4, #2
 8006708:	d017      	beq.n	800673a <__ieee754_atan2f+0xf6>
 800670a:	2c00      	cmp	r4, #0
 800670c:	d0ad      	beq.n	800666a <__ieee754_atan2f+0x26>
 800670e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006774 <__ieee754_atan2f+0x130>
 8006712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006716:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006778 <__ieee754_atan2f+0x134>
 800671a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800671e:	e7a4      	b.n	800666a <__ieee754_atan2f+0x26>
 8006720:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006768 <__ieee754_atan2f+0x124>
 8006724:	e7ed      	b.n	8006702 <__ieee754_atan2f+0xbe>
 8006726:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800677c <__ieee754_atan2f+0x138>
 800672a:	e7ea      	b.n	8006702 <__ieee754_atan2f+0xbe>
 800672c:	ee17 3a90 	vmov	r3, s15
 8006730:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	e797      	b.n	800666a <__ieee754_atan2f+0x26>
 800673a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8006774 <__ieee754_atan2f+0x130>
 800673e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006742:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006778 <__ieee754_atan2f+0x134>
 8006746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800674a:	e78e      	b.n	800666a <__ieee754_atan2f+0x26>
 800674c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006778 <__ieee754_atan2f+0x134>
 8006750:	e78b      	b.n	800666a <__ieee754_atan2f+0x26>
 8006752:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8006780 <__ieee754_atan2f+0x13c>
 8006756:	e788      	b.n	800666a <__ieee754_atan2f+0x26>
 8006758:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800677c <__ieee754_atan2f+0x138>
 800675c:	e785      	b.n	800666a <__ieee754_atan2f+0x26>
 800675e:	bf00      	nop
 8006760:	c0490fdb 	.word	0xc0490fdb
 8006764:	bfc90fdb 	.word	0xbfc90fdb
 8006768:	3fc90fdb 	.word	0x3fc90fdb
 800676c:	08006ac0 	.word	0x08006ac0
 8006770:	08006ab4 	.word	0x08006ab4
 8006774:	33bbbd2e 	.word	0x33bbbd2e
 8006778:	40490fdb 	.word	0x40490fdb
 800677c:	00000000 	.word	0x00000000
 8006780:	3f490fdb 	.word	0x3f490fdb

08006784 <atanf>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	ee10 5a10 	vmov	r5, s0
 800678a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800678e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8006792:	eef0 7a40 	vmov.f32	s15, s0
 8006796:	d310      	bcc.n	80067ba <atanf+0x36>
 8006798:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800679c:	d904      	bls.n	80067a8 <atanf+0x24>
 800679e:	ee70 7a00 	vadd.f32	s15, s0, s0
 80067a2:	eeb0 0a67 	vmov.f32	s0, s15
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80068e0 <atanf+0x15c>
 80067ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80068e4 <atanf+0x160>
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	bfc8      	it	gt
 80067b4:	eef0 7a47 	vmovgt.f32	s15, s14
 80067b8:	e7f3      	b.n	80067a2 <atanf+0x1e>
 80067ba:	4b4b      	ldr	r3, [pc, #300]	@ (80068e8 <atanf+0x164>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	d810      	bhi.n	80067e2 <atanf+0x5e>
 80067c0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80067c4:	d20a      	bcs.n	80067dc <atanf+0x58>
 80067c6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80068ec <atanf+0x168>
 80067ca:	ee30 7a07 	vadd.f32	s14, s0, s14
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80067d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067da:	dce2      	bgt.n	80067a2 <atanf+0x1e>
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e013      	b.n	800680a <atanf+0x86>
 80067e2:	f000 f8a3 	bl	800692c <fabsf>
 80067e6:	4b42      	ldr	r3, [pc, #264]	@ (80068f0 <atanf+0x16c>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	d84f      	bhi.n	800688c <atanf+0x108>
 80067ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d841      	bhi.n	8006878 <atanf+0xf4>
 80067f4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80067f8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80067fc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006800:	2300      	movs	r3, #0
 8006802:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006806:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006810:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80068f4 <atanf+0x170>
 8006814:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80068f8 <atanf+0x174>
 8006818:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80068fc <atanf+0x178>
 800681c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006820:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006824:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006900 <atanf+0x17c>
 8006828:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800682c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006904 <atanf+0x180>
 8006830:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006834:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006908 <atanf+0x184>
 8006838:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800683c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800690c <atanf+0x188>
 8006840:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006844:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006910 <atanf+0x18c>
 8006848:	eea6 5a87 	vfma.f32	s10, s13, s14
 800684c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006914 <atanf+0x190>
 8006850:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006854:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8006918 <atanf+0x194>
 8006858:	eea7 5a26 	vfma.f32	s10, s14, s13
 800685c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800691c <atanf+0x198>
 8006860:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006864:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006868:	eea5 7a86 	vfma.f32	s14, s11, s12
 800686c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006870:	d121      	bne.n	80068b6 <atanf+0x132>
 8006872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006876:	e794      	b.n	80067a2 <atanf+0x1e>
 8006878:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800687c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006880:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006884:	2301      	movs	r3, #1
 8006886:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800688a:	e7be      	b.n	800680a <atanf+0x86>
 800688c:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <atanf+0x19c>)
 800688e:	429c      	cmp	r4, r3
 8006890:	d80b      	bhi.n	80068aa <atanf+0x126>
 8006892:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8006896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800689a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800689e:	2302      	movs	r3, #2
 80068a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80068a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a8:	e7af      	b.n	800680a <atanf+0x86>
 80068aa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80068ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80068b2:	2303      	movs	r3, #3
 80068b4:	e7a9      	b.n	800680a <atanf+0x86>
 80068b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006924 <atanf+0x1a0>)
 80068b8:	491b      	ldr	r1, [pc, #108]	@ (8006928 <atanf+0x1a4>)
 80068ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80068be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80068c2:	edd3 6a00 	vldr	s13, [r3]
 80068c6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068d0:	edd2 7a00 	vldr	s15, [r2]
 80068d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068d8:	bfb8      	it	lt
 80068da:	eef1 7a67 	vneglt.f32	s15, s15
 80068de:	e760      	b.n	80067a2 <atanf+0x1e>
 80068e0:	bfc90fdb 	.word	0xbfc90fdb
 80068e4:	3fc90fdb 	.word	0x3fc90fdb
 80068e8:	3edfffff 	.word	0x3edfffff
 80068ec:	7149f2ca 	.word	0x7149f2ca
 80068f0:	3f97ffff 	.word	0x3f97ffff
 80068f4:	3c8569d7 	.word	0x3c8569d7
 80068f8:	3d4bda59 	.word	0x3d4bda59
 80068fc:	bd6ef16b 	.word	0xbd6ef16b
 8006900:	3d886b35 	.word	0x3d886b35
 8006904:	3dba2e6e 	.word	0x3dba2e6e
 8006908:	3e124925 	.word	0x3e124925
 800690c:	3eaaaaab 	.word	0x3eaaaaab
 8006910:	bd15a221 	.word	0xbd15a221
 8006914:	bd9d8795 	.word	0xbd9d8795
 8006918:	bde38e38 	.word	0xbde38e38
 800691c:	be4ccccd 	.word	0xbe4ccccd
 8006920:	401bffff 	.word	0x401bffff
 8006924:	08006adc 	.word	0x08006adc
 8006928:	08006acc 	.word	0x08006acc

0800692c <fabsf>:
 800692c:	ee10 3a10 	vmov	r3, s0
 8006930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006934:	ee00 3a10 	vmov	s0, r3
 8006938:	4770      	bx	lr
	...

0800693c <_init>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	bf00      	nop
 8006940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006942:	bc08      	pop	{r3}
 8006944:	469e      	mov	lr, r3
 8006946:	4770      	bx	lr

08006948 <_fini>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr
